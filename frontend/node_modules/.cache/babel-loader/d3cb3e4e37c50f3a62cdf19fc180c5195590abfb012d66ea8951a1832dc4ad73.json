{"ast":null,"code":"/*\n *          __        ___\n *    _____/ /___  __/ (_)____\n *   / ___/ __/ / / / / / ___/\n *  (__  ) /_/ /_/ / / (__  )\n * /____/\\__/\\__, /_/_/____/\n *          /____/\n *\n * light - weight css preprocessor @licence MIT\n */\n(function (factory) {\n  /* eslint-disable */\n  typeof exports === 'object' && typeof module !== 'undefined' ? module['exports'] = factory(null) : typeof define === 'function' && define['amd'] ? define(factory(null)) : window['stylis'] = factory(null);\n})(/** @param {*=} options */function factory(options) {\n  /* eslint-disable */\n\n  'use strict';\n\n  /**\n   * Notes\n   *\n   * The ['<method name>'] pattern is used to support closure compiler\n   * the jsdoc signatures are also used to the same effect\n   *\n   * ----\n   *\n   * int + int + int === n4 [faster]\n   *\n   * vs\n   *\n   * int === n1 && int === n2 && int === n3\n   *\n   * ----\n   *\n   * switch (int) { case ints...} [faster]\n   *\n   * vs\n   *\n   * if (int == 1 && int === 2 ...)\n   *\n   * ----\n   *\n   * The (first*n1 + second*n2 + third*n3) format used in the property parser\n   * is a simple way to hash the sequence of characters\n   * taking into account the index they occur in\n   * since any number of 3 character sequences could produce duplicates.\n   *\n   * On the other hand sequences that are directly tied to the index of the character\n   * resolve a far more accurate measure, it's also faster\n   * to evaluate one condition in a switch statement\n   * than three in an if statement regardless of the added math.\n   *\n   * This allows the vendor prefixer to be both small and fast.\n   */\n  var nullptn = /^\\0+/g; /* matches leading null characters */\n  var formatptn = /[\\0\\r\\f]/g; /* matches new line, null and formfeed characters */\n  var colonptn = /: */g; /* splits animation rules */\n  var cursorptn = /zoo|gra/; /* assert cursor varient */\n  var transformptn = /([,: ])(transform)/g; /* vendor prefix transform, older webkit */\n  var animationptn = /,+\\s*(?![^(]*[)])/g; /* splits multiple shorthand notation animations */\n  var propertiesptn = / +\\s*(?![^(]*[)])/g; /* animation properties */\n  var elementptn = / *[\\0] */g; /* selector elements */\n  var selectorptn = /,\\r+?/g; /* splits selectors */\n  var andptn = /([\\t\\r\\n ])*\\f?&/g; /* match & */\n  var escapeptn = /:global\\(((?:[^\\(\\)\\[\\]]*|\\[.*\\]|\\([^\\(\\)]*\\))*)\\)/g; /* matches :global(.*) */\n  var invalidptn = /\\W+/g; /* removes invalid characters from keyframes */\n  var keyframeptn = /@(k\\w+)\\s*(\\S*)\\s*/; /* matches @keyframes $1 */\n  var plcholdrptn = /::(place)/g; /* match ::placeholder varient */\n  var readonlyptn = /:(read-only)/g; /* match :read-only varient */\n  var beforeptn = /\\s+(?=[{\\];=:>])/g; /* matches \\s before ] ; = : */\n  var afterptn = /([[}=:>])\\s+/g; /* matches \\s after characters [ } = : */\n  var tailptn = /(\\{[^{]+?);(?=\\})/g; /* matches tail semi-colons ;} */\n  var whiteptn = /\\s{2,}/g; /* matches repeating whitespace */\n  var pseudoptn = /([^\\(])(:+) */g; /* pseudo element */\n  var writingptn = /[svh]\\w+-[tblr]{2}/; /* match writing mode property values */\n  var gradientptn = /([\\w-]+t\\()/g; /* match *gradient property */\n  var supportsptn = /\\(\\s*(.*)\\s*\\)/g; /* match supports (groups) */\n  var propertyptn = /([\\s\\S]*?);/g; /* match properties leading semicolon */\n  var selfptn = /-self|flex-/g; /* match flex- and -self in align-self: flex-*; */\n  var pseudofmt = /[^]*?(:[rp][el]a[\\w-]+)[^]*/; /* extrats :readonly or :placholder from selector */\n  var trimptn = /[ \\t]+$/; /* match tail whitspace */\n  var dimensionptn = /stretch|:\\s*\\w+\\-(?:conte|avail)/; /* match max/min/fit-content, fill-available */\n  var imgsrcptn = /([^-])(image-set\\()/;\n\n  /* vendors */\n  var webkit = '-webkit-';\n  var moz = '-moz-';\n  var ms = '-ms-';\n\n  /* character codes */\n  var SEMICOLON = 59; /* ; */\n  var CLOSEBRACES = 125; /* } */\n  var OPENBRACES = 123; /* { */\n  var OPENPARENTHESES = 40; /* ( */\n  var CLOSEPARENTHESES = 41; /* ) */\n  var OPENBRACKET = 91; /* [ */\n  var CLOSEBRACKET = 93; /* ] */\n  var NEWLINE = 10; /* \\n */\n  var CARRIAGE = 13; /* \\r */\n  var TAB = 9; /* \\t */\n  var AT = 64; /* @ */\n  var SPACE = 32; /*   */\n  var AND = 38; /* & */\n  var DASH = 45; /* - */\n  var UNDERSCORE = 95; /* _ */\n  var STAR = 42; /* * */\n  var COMMA = 44; /* , */\n  var COLON = 58; /* : */\n  var SINGLEQUOTE = 39; /* ' */\n  var DOUBLEQUOTE = 34; /* \" */\n  var FOWARDSLASH = 47; /* / */\n  var GREATERTHAN = 62; /* > */\n  var PLUS = 43; /* + */\n  var TILDE = 126; /* ~ */\n  var NULL = 0; /* \\0 */\n  var FORMFEED = 12; /* \\f */\n  var VERTICALTAB = 11; /* \\v */\n\n  /* special identifiers */\n  var KEYFRAME = 107; /* k */\n  var MEDIA = 109; /* m */\n  var SUPPORTS = 115; /* s */\n  var PLACEHOLDER = 112; /* p */\n  var READONLY = 111; /* o */\n  var IMPORT = 105; /* <at>i */\n  var CHARSET = 99; /* <at>c */\n  var DOCUMENT = 100; /* <at>d */\n  var PAGE = 112; /* <at>p */\n\n  var column = 1; /* current column */\n  var line = 1; /* current line numebr */\n  var pattern = 0; /* :pattern */\n\n  var cascade = 1; /* #id h1 h2 vs h1#id h2#id  */\n  var prefix = 1; /* vendor prefix */\n  var escape = 1; /* escape :global() pattern */\n  var compress = 0; /* compress output */\n  var semicolon = 0; /* no/semicolon option */\n  var preserve = 0; /* preserve empty selectors */\n\n  /* empty reference */\n  var array = [];\n\n  /* plugins */\n  var plugins = [];\n  var plugged = 0;\n  var should = null;\n\n  /* plugin context */\n  var POSTS = -2;\n  var PREPS = -1;\n  var UNKWN = 0;\n  var PROPS = 1;\n  var BLCKS = 2;\n  var ATRUL = 3;\n\n  /* plugin newline context */\n  var unkwn = 0;\n\n  /* keyframe animation */\n  var keyed = 1;\n  var key = '';\n\n  /* selector namespace */\n  var nscopealt = '';\n  var nscope = '';\n\n  /**\n   * Compile\n   *\n   * @param {Array<string>} parent\n   * @param {Array<string>} current\n   * @param {string} body\n   * @param {number} id\n   * @param {number} depth\n   * @return {string}\n   */\n  function compile(parent, current, body, id, depth) {\n    var bracket = 0; /* brackets [] */\n    var comment = 0; /* comments /* // or /* */\n    var parentheses = 0; /* functions () */\n    var quote = 0; /* quotes '', \"\" */\n\n    var first = 0; /* first character code */\n    var second = 0; /* second character code */\n    var code = 0; /* current character code */\n    var tail = 0; /* previous character code */\n    var trail = 0; /* character before previous code */\n    var peak = 0; /* previous non-whitespace code */\n\n    var counter = 0; /* count sequence termination */\n    var context = 0; /* track current context */\n    var atrule = 0; /* track @at-rule context */\n    var pseudo = 0; /* track pseudo token index */\n    var caret = 0; /* current character index */\n    var format = 0; /* control character formating context */\n    var insert = 0; /* auto semicolon insertion */\n    var invert = 0; /* inverted selector pattern */\n    var length = 0; /* generic length address */\n    var eof = body.length; /* end of file(length) */\n    var eol = eof - 1; /* end of file(characters) */\n\n    var char = ''; /* current character */\n    var chars = ''; /* current buffer of characters */\n    var child = ''; /* next buffer of characters */\n    var out = ''; /* compiled body */\n    var children = ''; /* compiled children */\n    var flat = ''; /* compiled leafs */\n    var selector; /* generic selector address */\n    var result; /* generic address */\n\n    // ...build body\n    while (caret < eof) {\n      code = body.charCodeAt(caret);\n\n      // eof varient\n      if (caret === eol) {\n        // last character + noop context, add synthetic padding for noop context to terminate\n        if (comment + quote + parentheses + bracket !== 0) {\n          if (comment !== 0) {\n            code = comment === FOWARDSLASH ? NEWLINE : FOWARDSLASH;\n          }\n          quote = parentheses = bracket = 0;\n          eof++;\n          eol++;\n        }\n      }\n      if (comment + quote + parentheses + bracket === 0) {\n        // eof varient\n        if (caret === eol) {\n          if (format > 0) {\n            chars = chars.replace(formatptn, '');\n          }\n          if (chars.trim().length > 0) {\n            switch (code) {\n              case SPACE:\n              case TAB:\n              case SEMICOLON:\n              case CARRIAGE:\n              case NEWLINE:\n                {\n                  break;\n                }\n              default:\n                {\n                  chars += body.charAt(caret);\n                }\n            }\n            code = SEMICOLON;\n          }\n        }\n\n        // auto semicolon insertion\n        if (insert === 1) {\n          switch (code) {\n            // false flags\n            case OPENBRACES:\n            case CLOSEBRACES:\n            case SEMICOLON:\n            case DOUBLEQUOTE:\n            case SINGLEQUOTE:\n            case OPENPARENTHESES:\n            case CLOSEPARENTHESES:\n            case COMMA:\n              {\n                insert = 0;\n              }\n            // ignore\n            case TAB:\n            case CARRIAGE:\n            case NEWLINE:\n            case SPACE:\n              {\n                break;\n              }\n            // valid\n            default:\n              {\n                insert = 0;\n                length = caret;\n                first = code;\n                caret--;\n                code = SEMICOLON;\n                while (length < eof) {\n                  switch (body.charCodeAt(length++)) {\n                    case NEWLINE:\n                    case CARRIAGE:\n                    case SEMICOLON:\n                      {\n                        ++caret;\n                        code = first;\n                        length = eof;\n                        break;\n                      }\n                    case COLON:\n                      {\n                        if (format > 0) {\n                          ++caret;\n                          code = first;\n                        }\n                      }\n                    case OPENBRACES:\n                      {\n                        length = eof;\n                      }\n                  }\n                }\n              }\n          }\n        }\n\n        // token varient\n        switch (code) {\n          case OPENBRACES:\n            {\n              chars = chars.trim();\n              first = chars.charCodeAt(0);\n              counter = 1;\n              length = ++caret;\n              while (caret < eof) {\n                switch (code = body.charCodeAt(caret)) {\n                  case OPENBRACES:\n                    {\n                      counter++;\n                      break;\n                    }\n                  case CLOSEBRACES:\n                    {\n                      counter--;\n                      break;\n                    }\n                  case FOWARDSLASH:\n                    {\n                      switch (second = body.charCodeAt(caret + 1)) {\n                        // /*, //\n                        case STAR:\n                        case FOWARDSLASH:\n                          {\n                            caret = delimited(second, caret, eol, body);\n                          }\n                      }\n                      break;\n                    }\n                  // given \"[\" === 91 & \"]\" === 93 hence forth 91 + 1 + 1 === 93\n                  case OPENBRACKET:\n                    {\n                      code++;\n                    }\n                  // given \"(\" === 40 & \")\" === 41 hence forth 40 + 1 === 41\n                  case OPENPARENTHESES:\n                    {\n                      code++;\n                    }\n                  // quote tail delimiter is identical to the head delimiter hence noop,\n                  // fallthrough clauses have been shifted to the correct tail delimiter\n                  case DOUBLEQUOTE:\n                  case SINGLEQUOTE:\n                    {\n                      while (caret++ < eol) {\n                        if (body.charCodeAt(caret) === code) {\n                          break;\n                        }\n                      }\n                    }\n                }\n                if (counter === 0) {\n                  break;\n                }\n                caret++;\n              }\n              child = body.substring(length, caret);\n              if (first === NULL) {\n                first = (chars = chars.replace(nullptn, '').trim()).charCodeAt(0);\n              }\n              switch (first) {\n                // @at-rule\n                case AT:\n                  {\n                    if (format > 0) {\n                      chars = chars.replace(formatptn, '');\n                    }\n                    second = chars.charCodeAt(1);\n                    switch (second) {\n                      case DOCUMENT:\n                      case MEDIA:\n                      case SUPPORTS:\n                      case DASH:\n                        {\n                          selector = current;\n                          break;\n                        }\n                      default:\n                        {\n                          selector = array;\n                        }\n                    }\n                    child = compile(current, selector, child, second, depth + 1);\n                    length = child.length;\n\n                    // preserve empty @at-rule\n                    if (preserve > 0 && length === 0) {\n                      length = chars.length;\n                    }\n\n                    // execute plugins, @at-rule context\n                    if (plugged > 0) {\n                      selector = select(array, chars, invert);\n                      result = proxy(ATRUL, child, selector, current, line, column, length, second, depth, id);\n                      chars = selector.join('');\n                      if (result !== void 0) {\n                        if ((length = (child = result.trim()).length) === 0) {\n                          second = 0;\n                          child = '';\n                        }\n                      }\n                    }\n                    if (length > 0) {\n                      switch (second) {\n                        case SUPPORTS:\n                          {\n                            chars = chars.replace(supportsptn, supports);\n                          }\n                        case DOCUMENT:\n                        case MEDIA:\n                        case DASH:\n                          {\n                            child = chars + '{' + child + '}';\n                            break;\n                          }\n                        case KEYFRAME:\n                          {\n                            chars = chars.replace(keyframeptn, '$1 $2' + (keyed > 0 ? key : ''));\n                            child = chars + '{' + child + '}';\n                            if (prefix === 1 || prefix === 2 && vendor('@' + child, 3)) {\n                              child = '@' + webkit + child + '@' + child;\n                            } else {\n                              child = '@' + child;\n                            }\n                            break;\n                          }\n                        default:\n                          {\n                            child = chars + child;\n                            if (id === PAGE) {\n                              child = (out += child, '');\n                            }\n                          }\n                      }\n                    } else {\n                      child = '';\n                    }\n                    break;\n                  }\n                // selector\n                default:\n                  {\n                    child = compile(current, select(current, chars, invert), child, id, depth + 1);\n                  }\n              }\n              children += child;\n\n              // reset\n              context = 0;\n              insert = 0;\n              pseudo = 0;\n              format = 0;\n              invert = 0;\n              atrule = 0;\n              chars = '';\n              child = '';\n              code = body.charCodeAt(++caret);\n              break;\n            }\n          case CLOSEBRACES:\n          case SEMICOLON:\n            {\n              chars = (format > 0 ? chars.replace(formatptn, '') : chars).trim();\n              if ((length = chars.length) > 1) {\n                // monkey-patch missing colon\n                if (pseudo === 0) {\n                  first = chars.charCodeAt(0);\n\n                  // first character is a letter or dash, buffer has a space character\n                  if (first === DASH || first > 96 && first < 123) {\n                    length = (chars = chars.replace(' ', ':')).length;\n                  }\n                }\n\n                // execute plugins, property context\n                if (plugged > 0) {\n                  if ((result = proxy(PROPS, chars, current, parent, line, column, out.length, id, depth, id)) !== void 0) {\n                    if ((length = (chars = result.trim()).length) === 0) {\n                      chars = '\\0\\0';\n                    }\n                  }\n                }\n                first = chars.charCodeAt(0);\n                second = chars.charCodeAt(1);\n                switch (first) {\n                  case NULL:\n                    {\n                      break;\n                    }\n                  case AT:\n                    {\n                      if (second === IMPORT || second === CHARSET) {\n                        flat += chars + body.charAt(caret);\n                        break;\n                      }\n                    }\n                  default:\n                    {\n                      if (chars.charCodeAt(length - 1) === COLON) {\n                        break;\n                      }\n                      out += property(chars, first, second, chars.charCodeAt(2));\n                    }\n                }\n              }\n\n              // reset\n              context = 0;\n              insert = 0;\n              pseudo = 0;\n              format = 0;\n              invert = 0;\n              chars = '';\n              code = body.charCodeAt(++caret);\n              break;\n            }\n        }\n      }\n\n      // parse characters\n      switch (code) {\n        case CARRIAGE:\n        case NEWLINE:\n          {\n            // auto insert semicolon\n            if (comment + quote + parentheses + bracket + semicolon === 0) {\n              // valid non-whitespace characters that\n              // may precede a newline\n              switch (peak) {\n                case CLOSEPARENTHESES:\n                case SINGLEQUOTE:\n                case DOUBLEQUOTE:\n                case AT:\n                case TILDE:\n                case GREATERTHAN:\n                case STAR:\n                case PLUS:\n                case FOWARDSLASH:\n                case DASH:\n                case COLON:\n                case COMMA:\n                case SEMICOLON:\n                case OPENBRACES:\n                case CLOSEBRACES:\n                  {\n                    break;\n                  }\n                default:\n                  {\n                    // current buffer has a colon\n                    if (pseudo > 0) {\n                      insert = 1;\n                    }\n                  }\n              }\n            }\n\n            // terminate line comment\n            if (comment === FOWARDSLASH) {\n              comment = 0;\n            } else if (cascade + context === 0 && id !== KEYFRAME && chars.length > 0) {\n              format = 1;\n              chars += '\\0';\n            }\n\n            // execute plugins, newline context\n            if (plugged * unkwn > 0) {\n              proxy(UNKWN, chars, current, parent, line, column, out.length, id, depth, id);\n            }\n\n            // next line, reset column position\n            column = 1;\n            line++;\n            break;\n          }\n        case SEMICOLON:\n        case CLOSEBRACES:\n          {\n            if (comment + quote + parentheses + bracket === 0) {\n              column++;\n              break;\n            }\n          }\n        default:\n          {\n            // increment column position\n            column++;\n\n            // current character\n            char = body.charAt(caret);\n\n            // remove comments, escape functions, strings, attributes and prepare selectors\n            switch (code) {\n              case TAB:\n              case SPACE:\n                {\n                  if (quote + bracket + comment === 0) {\n                    switch (tail) {\n                      case COMMA:\n                      case COLON:\n                      case TAB:\n                      case SPACE:\n                        {\n                          char = '';\n                          break;\n                        }\n                      default:\n                        {\n                          if (code !== SPACE) {\n                            char = ' ';\n                          }\n                        }\n                    }\n                  }\n                  break;\n                }\n              // escape breaking control characters\n              case NULL:\n                {\n                  char = '\\\\0';\n                  break;\n                }\n              case FORMFEED:\n                {\n                  char = '\\\\f';\n                  break;\n                }\n              case VERTICALTAB:\n                {\n                  char = '\\\\v';\n                  break;\n                }\n              // &\n              case AND:\n                {\n                  // inverted selector pattern i.e html &\n                  if (quote + comment + bracket === 0 && cascade > 0) {\n                    invert = 1;\n                    format = 1;\n                    char = '\\f' + char;\n                  }\n                  break;\n                }\n              // ::p<l>aceholder, l\n              // :read-on<l>y, l\n              case 108:\n                {\n                  if (quote + comment + bracket + pattern === 0 && pseudo > 0) {\n                    switch (caret - pseudo) {\n                      // ::placeholder\n                      case 2:\n                        {\n                          if (tail === PLACEHOLDER && body.charCodeAt(caret - 3) === COLON) {\n                            pattern = tail;\n                          }\n                        }\n                      // :read-only\n                      case 8:\n                        {\n                          if (trail === READONLY) {\n                            pattern = trail;\n                          }\n                        }\n                    }\n                  }\n                  break;\n                }\n              // :<pattern>\n              case COLON:\n                {\n                  if (quote + comment + bracket === 0) {\n                    pseudo = caret;\n                  }\n                  break;\n                }\n              // selectors\n              case COMMA:\n                {\n                  if (comment + parentheses + quote + bracket === 0) {\n                    format = 1;\n                    char += '\\r';\n                  }\n                  break;\n                }\n              // quotes\n              case DOUBLEQUOTE:\n              case SINGLEQUOTE:\n                {\n                  if (comment === 0) {\n                    quote = quote === code ? 0 : quote === 0 ? code : quote;\n                  }\n                  break;\n                }\n              // attributes\n              case OPENBRACKET:\n                {\n                  if (quote + comment + parentheses === 0) {\n                    bracket++;\n                  }\n                  break;\n                }\n              case CLOSEBRACKET:\n                {\n                  if (quote + comment + parentheses === 0) {\n                    bracket--;\n                  }\n                  break;\n                }\n              // functions\n              case CLOSEPARENTHESES:\n                {\n                  if (quote + comment + bracket === 0) {\n                    parentheses--;\n                  }\n                  break;\n                }\n              case OPENPARENTHESES:\n                {\n                  if (quote + comment + bracket === 0) {\n                    if (context === 0) {\n                      switch (tail * 2 + trail * 3) {\n                        // :matches\n                        case 533:\n                          {\n                            break;\n                          }\n                        // :global, :not, :nth-child etc...\n                        default:\n                          {\n                            counter = 0;\n                            context = 1;\n                          }\n                      }\n                    }\n                    parentheses++;\n                  }\n                  break;\n                }\n              case AT:\n                {\n                  if (comment + parentheses + quote + bracket + pseudo + atrule === 0) {\n                    atrule = 1;\n                  }\n                  break;\n                }\n              // block/line comments\n              case STAR:\n              case FOWARDSLASH:\n                {\n                  if (quote + bracket + parentheses > 0) {\n                    break;\n                  }\n                  switch (comment) {\n                    // initialize line/block comment context\n                    case 0:\n                      {\n                        switch (code * 2 + body.charCodeAt(caret + 1) * 3) {\n                          // //\n                          case 235:\n                            {\n                              comment = FOWARDSLASH;\n                              break;\n                            }\n                          // /*\n                          case 220:\n                            {\n                              length = caret;\n                              comment = STAR;\n                              break;\n                            }\n                        }\n                        break;\n                      }\n                    // end block comment context\n                    case STAR:\n                      {\n                        if (code === FOWARDSLASH && tail === STAR && length + 2 !== caret) {\n                          // /*<!> ... */, !\n                          if (body.charCodeAt(length + 2) === 33) {\n                            out += body.substring(length, caret + 1);\n                          }\n                          char = '';\n                          comment = 0;\n                        }\n                      }\n                  }\n                }\n            }\n\n            // ignore comment blocks\n            if (comment === 0) {\n              // aggressive isolation mode, divide each individual selector\n              // including selectors in :not function but excluding selectors in :global function\n              if (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code !== SEMICOLON) {\n                switch (code) {\n                  case COMMA:\n                  case TILDE:\n                  case GREATERTHAN:\n                  case PLUS:\n                  case CLOSEPARENTHESES:\n                  case OPENPARENTHESES:\n                    {\n                      if (context === 0) {\n                        // outside of an isolated context i.e nth-child(<...>)\n                        switch (tail) {\n                          case TAB:\n                          case SPACE:\n                          case NEWLINE:\n                          case CARRIAGE:\n                            {\n                              char = char + '\\0';\n                              break;\n                            }\n                          default:\n                            {\n                              char = '\\0' + char + (code === COMMA ? '' : '\\0');\n                            }\n                        }\n                        format = 1;\n                      } else {\n                        // within an isolated context, sleep untill it's terminated\n                        switch (code) {\n                          case OPENPARENTHESES:\n                            {\n                              // :globa<l>(\n                              if (pseudo + 7 === caret && tail === 108) {\n                                pseudo = 0;\n                              }\n                              context = ++counter;\n                              break;\n                            }\n                          case CLOSEPARENTHESES:\n                            {\n                              if ((context = --counter) === 0) {\n                                format = 1;\n                                char += '\\0';\n                              }\n                              break;\n                            }\n                        }\n                      }\n                      break;\n                    }\n                  case TAB:\n                  case SPACE:\n                    {\n                      switch (tail) {\n                        case NULL:\n                        case OPENBRACES:\n                        case CLOSEBRACES:\n                        case SEMICOLON:\n                        case COMMA:\n                        case FORMFEED:\n                        case TAB:\n                        case SPACE:\n                        case NEWLINE:\n                        case CARRIAGE:\n                          {\n                            break;\n                          }\n                        default:\n                          {\n                            // ignore in isolated contexts\n                            if (context === 0) {\n                              format = 1;\n                              char += '\\0';\n                            }\n                          }\n                      }\n                    }\n                }\n              }\n\n              // concat buffer of characters\n              chars += char;\n\n              // previous non-whitespace character code\n              if (code !== SPACE && code !== TAB) {\n                peak = code;\n              }\n            }\n          }\n      }\n\n      // tail character codes\n      trail = tail;\n      tail = code;\n\n      // visit every character\n      caret++;\n    }\n    length = out.length;\n\n    // preserve empty selector\n    if (preserve > 0) {\n      if (length === 0 && children.length === 0 && current[0].length === 0 === false) {\n        if (id !== MEDIA || current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0]) {\n          length = current.join(',').length + 2;\n        }\n      }\n    }\n    if (length > 0) {\n      // cascade isolation mode?\n      selector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current;\n\n      // execute plugins, block context\n      if (plugged > 0) {\n        result = proxy(BLCKS, out, selector, parent, line, column, length, id, depth, id);\n        if (result !== void 0 && (out = result).length === 0) {\n          return flat + out + children;\n        }\n      }\n      out = selector.join(',') + '{' + out + '}';\n      if (prefix * pattern !== 0) {\n        if (prefix === 2 && !vendor(out, 2)) pattern = 0;\n        switch (pattern) {\n          // ::read-only\n          case READONLY:\n            {\n              out = out.replace(readonlyptn, ':' + moz + '$1') + out;\n              break;\n            }\n          // ::placeholder\n          case PLACEHOLDER:\n            {\n              out = out.replace(plcholdrptn, '::' + webkit + 'input-$1') + out.replace(plcholdrptn, '::' + moz + '$1') + out.replace(plcholdrptn, ':' + ms + 'input-$1') + out;\n              break;\n            }\n        }\n        pattern = 0;\n      }\n    }\n    return flat + out + children;\n  }\n\n  /**\n   * Select\n   *\n   * @param {Array<string>} parent\n   * @param {string} current\n   * @param {number} invert\n   * @return {Array<string>}\n   */\n  function select(parent, current, invert) {\n    var selectors = current.trim().split(selectorptn);\n    var out = selectors;\n    var length = selectors.length;\n    var l = parent.length;\n    switch (l) {\n      // 0-1 parent selectors\n      case 0:\n      case 1:\n        {\n          for (var i = 0, selector = l === 0 ? '' : parent[0] + ' '; i < length; ++i) {\n            out[i] = scope(selector, out[i], invert, l).trim();\n          }\n          break;\n        }\n      // >2 parent selectors, nested\n      default:\n        {\n          for (var i = 0, j = 0, out = []; i < length; ++i) {\n            for (var k = 0; k < l; ++k) {\n              out[j++] = scope(parent[k] + ' ', selectors[i], invert, l).trim();\n            }\n          }\n        }\n    }\n    return out;\n  }\n\n  /**\n   * Scope\n   *\n   * @param {string} parent\n   * @param {string} current\n   * @param {number} invert\n   * @param {number} level\n   * @return {string}\n   */\n  function scope(parent, current, invert, level) {\n    var selector = current;\n    var code = selector.charCodeAt(0);\n\n    // trim leading whitespace\n    if (code < 33) {\n      code = (selector = selector.trim()).charCodeAt(0);\n    }\n    switch (code) {\n      // &\n      case AND:\n        {\n          switch (cascade + level) {\n            case 0:\n            case 1:\n              {\n                if (parent.trim().length === 0) {\n                  break;\n                }\n              }\n            default:\n              {\n                return selector.replace(andptn, '$1' + parent.trim());\n              }\n          }\n          break;\n        }\n      // :\n      case COLON:\n        {\n          switch (selector.charCodeAt(1)) {\n            // g in :global\n            case 103:\n              {\n                if (escape > 0 && cascade > 0) {\n                  return selector.replace(escapeptn, '$1').replace(andptn, '$1' + nscope);\n                }\n                break;\n              }\n            default:\n              {\n                // :hover\n                return parent.trim() + selector.replace(andptn, '$1' + parent.trim());\n              }\n          }\n        }\n      default:\n        {\n          // html &\n          if (invert * cascade > 0 && selector.indexOf('\\f') > 0) {\n            return selector.replace(andptn, (parent.charCodeAt(0) === COLON ? '' : '$1') + parent.trim());\n          }\n        }\n    }\n    return parent + selector;\n  }\n\n  /**\n   * Property\n   *\n   * @param {string} input\n   * @param {number} first\n   * @param {number} second\n   * @param {number} third\n   * @return {string}\n   */\n  function property(input, first, second, third) {\n    var index = 0;\n    var out = input + ';';\n    var hash = first * 2 + second * 3 + third * 4;\n    var cache;\n\n    // animation: a, n, i characters\n    if (hash === 944) {\n      return animation(out);\n    } else if (prefix === 0 || prefix === 2 && !vendor(out, 1)) {\n      return out;\n    }\n\n    // vendor prefix\n    switch (hash) {\n      // text-decoration/text-size-adjust/text-shadow/text-align/text-transform: t, e, x\n      case 1015:\n        {\n          // text-shadow/text-align/text-transform, a\n          return out.charCodeAt(10) === 97 ? webkit + out + out : out;\n        }\n      // filter/fill f, i, l\n      case 951:\n        {\n          // filter, t\n          return out.charCodeAt(3) === 116 ? webkit + out + out : out;\n        }\n      // color/column, c, o, l\n      case 963:\n        {\n          // column, n\n          return out.charCodeAt(5) === 110 ? webkit + out + out : out;\n        }\n      // box-decoration-break, b, o, x\n      case 1009:\n        {\n          if (out.charCodeAt(4) !== 100) {\n            break;\n          }\n        }\n      // mask, m, a, s\n      // clip-path, c, l, i\n      case 969:\n      case 942:\n        {\n          return webkit + out + out;\n        }\n      // appearance: a, p, p\n      case 978:\n        {\n          return webkit + out + moz + out + out;\n        }\n      // hyphens: h, y, p\n      // user-select: u, s, e\n      case 1019:\n      case 983:\n        {\n          return webkit + out + moz + out + ms + out + out;\n        }\n      // background/backface-visibility, b, a, c\n      case 883:\n        {\n          // backface-visibility, -\n          if (out.charCodeAt(8) === DASH) {\n            return webkit + out + out;\n          }\n\n          // image-set(...)\n          if (out.indexOf('image-set(', 11) > 0) {\n            return out.replace(imgsrcptn, '$1' + webkit + '$2') + out;\n          }\n          return out;\n        }\n      // flex: f, l, e\n      case 932:\n        {\n          if (out.charCodeAt(4) === DASH) {\n            switch (out.charCodeAt(5)) {\n              // flex-grow, g\n              case 103:\n                {\n                  return webkit + 'box-' + out.replace('-grow', '') + webkit + out + ms + out.replace('grow', 'positive') + out;\n                }\n              // flex-shrink, s\n              case 115:\n                {\n                  return webkit + out + ms + out.replace('shrink', 'negative') + out;\n                }\n              // flex-basis, b\n              case 98:\n                {\n                  return webkit + out + ms + out.replace('basis', 'preferred-size') + out;\n                }\n            }\n          }\n          return webkit + out + ms + out + out;\n        }\n      // order: o, r, d\n      case 964:\n        {\n          return webkit + out + ms + 'flex' + '-' + out + out;\n        }\n      // justify-items/justify-content, j, u, s\n      case 1023:\n        {\n          // justify-content, c\n          if (out.charCodeAt(8) !== 99) {\n            break;\n          }\n          cache = out.substring(out.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');\n          return webkit + 'box-pack' + cache + webkit + out + ms + 'flex-pack' + cache + out;\n        }\n      // cursor, c, u, r\n      case 1005:\n        {\n          return cursorptn.test(out) ? out.replace(colonptn, ':' + webkit) + out.replace(colonptn, ':' + moz) + out : out;\n        }\n      // writing-mode, w, r, i\n      case 1000:\n        {\n          cache = out.substring(13).trim();\n          index = cache.indexOf('-') + 1;\n          switch (cache.charCodeAt(0) + cache.charCodeAt(index)) {\n            // vertical-lr\n            case 226:\n              {\n                cache = out.replace(writingptn, 'tb');\n                break;\n              }\n            // vertical-rl\n            case 232:\n              {\n                cache = out.replace(writingptn, 'tb-rl');\n                break;\n              }\n            // horizontal-tb\n            case 220:\n              {\n                cache = out.replace(writingptn, 'lr');\n                break;\n              }\n            default:\n              {\n                return out;\n              }\n          }\n          return webkit + out + ms + cache + out;\n        }\n      // position: sticky\n      case 1017:\n        {\n          if (out.indexOf('sticky', 9) === -1) {\n            return out;\n          }\n        }\n      // display(flex/inline-flex/inline-box): d, i, s\n      case 975:\n        {\n          index = (out = input).length - 10;\n          cache = (out.charCodeAt(index) === 33 ? out.substring(0, index) : out).substring(input.indexOf(':', 7) + 1).trim();\n          switch (hash = cache.charCodeAt(0) + (cache.charCodeAt(7) | 0)) {\n            // inline-\n            case 203:\n              {\n                // inline-box\n                if (cache.charCodeAt(8) < 111) {\n                  break;\n                }\n              }\n            // inline-box/sticky\n            case 115:\n              {\n                out = out.replace(cache, webkit + cache) + ';' + out;\n                break;\n              }\n            // inline-flex\n            // flex\n            case 207:\n            case 102:\n              {\n                out = out.replace(cache, webkit + (hash > 102 ? 'inline-' : '') + 'box') + ';' + out.replace(cache, webkit + cache) + ';' + out.replace(cache, ms + cache + 'box') + ';' + out;\n              }\n          }\n          return out + ';';\n        }\n      // align-items, align-center, align-self: a, l, i, -\n      case 938:\n        {\n          if (out.charCodeAt(5) === DASH) {\n            switch (out.charCodeAt(6)) {\n              // align-items, i\n              case 105:\n                {\n                  cache = out.replace('-items', '');\n                  return webkit + out + webkit + 'box-' + cache + ms + 'flex-' + cache + out;\n                }\n              // align-self, s\n              case 115:\n                {\n                  return webkit + out + ms + 'flex-item-' + out.replace(selfptn, '') + out;\n                }\n              // align-content\n              default:\n                {\n                  return webkit + out + ms + 'flex-line-pack' + out.replace('align-content', '').replace(selfptn, '') + out;\n                }\n            }\n          }\n          break;\n        }\n      // min/max\n      case 973:\n      case 989:\n        {\n          // min-/max- height/width/block-size/inline-size\n          if (out.charCodeAt(3) !== DASH || out.charCodeAt(4) === 122) {\n            break;\n          }\n        }\n      // height/width: min-content / width: max-content\n      case 931:\n      case 953:\n        {\n          if (dimensionptn.test(input) === true) {\n            // stretch\n            if ((cache = input.substring(input.indexOf(':') + 1)).charCodeAt(0) === 115) return property(input.replace('stretch', 'fill-available'), first, second, third).replace(':fill-available', ':stretch');else return out.replace(cache, webkit + cache) + out.replace(cache, moz + cache.replace('fill-', '')) + out;\n          }\n          break;\n        }\n      // transform, transition: t, r, a\n      case 962:\n        {\n          out = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : '') + out;\n\n          // transitions\n          if (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf('transform', 10) > 0) {\n            return out.substring(0, out.indexOf(';', 27) + 1).replace(transformptn, '$1' + webkit + '$2') + out;\n          }\n          break;\n        }\n    }\n    return out;\n  }\n\n  /**\n   * Vendor\n   *\n   * @param {string} content\n   * @param {number} context\n   * @return {boolean}\n   */\n  function vendor(content, context) {\n    var index = content.indexOf(context === 1 ? ':' : '{');\n    var key = content.substring(0, context !== 3 ? index : 10);\n    var value = content.substring(index + 1, content.length - 1);\n    return should(context !== 2 ? key : key.replace(pseudofmt, '$1'), value, context);\n  }\n\n  /**\n   * Supports\n   *\n   * @param {string} match\n   * @param {string} group\n   * @return {string}\n   */\n  function supports(match, group) {\n    var out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2));\n    return out !== group + ';' ? out.replace(propertyptn, ' or ($1)').substring(4) : '(' + group + ')';\n  }\n\n  /**\n   * Animation\n   *\n   * @param {string} input\n   * @return {string}\n   */\n  function animation(input) {\n    var length = input.length;\n    var index = input.indexOf(':', 9) + 1;\n    var declare = input.substring(0, index).trim();\n    var out = input.substring(index, length - 1).trim();\n    switch (input.charCodeAt(9) * keyed) {\n      case 0:\n        {\n          break;\n        }\n      // animation-*, -\n      case DASH:\n        {\n          // animation-name, n\n          if (input.charCodeAt(10) !== 110) {\n            break;\n          }\n        }\n      // animation/animation-name\n      default:\n        {\n          // split in case of multiple animations\n          var list = out.split((out = '', animationptn));\n          for (var i = 0, index = 0, length = list.length; i < length; index = 0, ++i) {\n            var value = list[i];\n            var items = value.split(propertiesptn);\n            while (value = items[index]) {\n              var peak = value.charCodeAt(0);\n              if (keyed === 1 && (\n              // letters\n              peak > AT && peak < 90 || peak > 96 && peak < 123 || peak === UNDERSCORE ||\n              // dash but not in sequence i.e --\n              peak === DASH && value.charCodeAt(1) !== DASH)) {\n                // not a number/function\n                switch (isNaN(parseFloat(value)) + (value.indexOf('(') !== -1)) {\n                  case 1:\n                    {\n                      switch (value) {\n                        // not a valid reserved keyword\n                        case 'infinite':\n                        case 'alternate':\n                        case 'backwards':\n                        case 'running':\n                        case 'normal':\n                        case 'forwards':\n                        case 'both':\n                        case 'none':\n                        case 'linear':\n                        case 'ease':\n                        case 'ease-in':\n                        case 'ease-out':\n                        case 'ease-in-out':\n                        case 'paused':\n                        case 'reverse':\n                        case 'alternate-reverse':\n                        case 'inherit':\n                        case 'initial':\n                        case 'unset':\n                        case 'step-start':\n                        case 'step-end':\n                          {\n                            break;\n                          }\n                        default:\n                          {\n                            value += key;\n                          }\n                      }\n                    }\n                }\n              }\n              items[index++] = value;\n            }\n            out += (i === 0 ? '' : ',') + items.join(' ');\n          }\n        }\n    }\n    out = declare + out + ';';\n    if (prefix === 1 || prefix === 2 && vendor(out, 1)) return webkit + out + out;\n    return out;\n  }\n\n  /**\n   * Isolate\n   *\n   * @param {Array<string>} current\n   */\n  function isolate(current) {\n    for (var i = 0, length = current.length, selector = Array(length), padding, element; i < length; ++i) {\n      // split individual elements in a selector i.e h1 h2 === [h1, h2]\n      var elements = current[i].split(elementptn);\n      var out = '';\n      for (var j = 0, size = 0, tail = 0, code = 0, l = elements.length; j < l; ++j) {\n        // empty element\n        if ((size = (element = elements[j]).length) === 0 && l > 1) {\n          continue;\n        }\n        tail = out.charCodeAt(out.length - 1);\n        code = element.charCodeAt(0);\n        padding = '';\n        if (j !== 0) {\n          // determine if we need padding\n          switch (tail) {\n            case STAR:\n            case TILDE:\n            case GREATERTHAN:\n            case PLUS:\n            case SPACE:\n            case OPENPARENTHESES:\n              {\n                break;\n              }\n            default:\n              {\n                padding = ' ';\n              }\n          }\n        }\n        switch (code) {\n          case AND:\n            {\n              element = padding + nscopealt;\n            }\n          case TILDE:\n          case GREATERTHAN:\n          case PLUS:\n          case SPACE:\n          case CLOSEPARENTHESES:\n          case OPENPARENTHESES:\n            {\n              break;\n            }\n          case OPENBRACKET:\n            {\n              element = padding + element + nscopealt;\n              break;\n            }\n          case COLON:\n            {\n              switch (element.charCodeAt(1) * 2 + element.charCodeAt(2) * 3) {\n                // :global\n                case 530:\n                  {\n                    if (escape > 0) {\n                      element = padding + element.substring(8, size - 1);\n                      break;\n                    }\n                  }\n                // :hover, :nth-child(), ...\n                default:\n                  {\n                    if (j < 1 || elements[j - 1].length < 1) {\n                      element = padding + nscopealt + element;\n                    }\n                  }\n              }\n              break;\n            }\n          case COMMA:\n            {\n              padding = '';\n            }\n          default:\n            {\n              if (size > 1 && element.indexOf(':') > 0) {\n                element = padding + element.replace(pseudoptn, '$1' + nscopealt + '$2');\n              } else {\n                element = padding + element + nscopealt;\n              }\n            }\n        }\n        out += element;\n      }\n      selector[i] = out.replace(formatptn, '').trim();\n    }\n    return selector;\n  }\n\n  /**\n   * Proxy\n   *\n   * @param {number} context\n   * @param {string} content\n   * @param {Array<string>} selectors\n   * @param {Array<string>} parents\n   * @param {number} line\n   * @param {number} column\n   * @param {number} length\n   * @param {number} id\n   * @param {number} depth\n   * @param {number} at\n   * @return {(string|void|*)}\n   */\n  function proxy(context, content, selectors, parents, line, column, length, id, depth, at) {\n    for (var i = 0, out = content, next; i < plugged; ++i) {\n      switch (next = plugins[i].call(stylis, context, out, selectors, parents, line, column, length, id, depth, at)) {\n        case void 0:\n        case false:\n        case true:\n        case null:\n          {\n            break;\n          }\n        default:\n          {\n            out = next;\n          }\n      }\n    }\n    if (out !== content) {\n      return out;\n    }\n  }\n\n  /**\n   * @param {number} code\n   * @param {number} index\n   * @param {number} length\n   * @param {string} body\n   * @return {number}\n   */\n  function delimited(code, index, length, body) {\n    for (var i = index + 1; i < length; ++i) {\n      switch (body.charCodeAt(i)) {\n        // /*\n        case FOWARDSLASH:\n          {\n            if (code === STAR) {\n              if (body.charCodeAt(i - 1) === STAR && index + 2 !== i) {\n                return i + 1;\n              }\n            }\n            break;\n          }\n        // //\n        case NEWLINE:\n          {\n            if (code === FOWARDSLASH) {\n              return i + 1;\n            }\n          }\n      }\n    }\n    return i;\n  }\n\n  /**\n   * @param {number} type\n   * @param {number} index\n   * @param {number} length\n   * @param {number} find\n   * @param {string} body\n   * @return {number}\n   */\n  function match(type, index, length, body) {\n    for (var i = index + 1; i < length; ++i) {\n      switch (body.charCodeAt(i)) {\n        case type:\n          {\n            return i;\n          }\n      }\n    }\n    return i;\n  }\n\n  /**\n   * Minify\n   *\n   * @param {(string|*)} output\n   * @return {string}\n   */\n  function minify(output) {\n    return output.replace(formatptn, '').replace(beforeptn, '').replace(afterptn, '$1').replace(tailptn, '$1').replace(whiteptn, ' ');\n  }\n\n  /**\n   * Use\n   *\n   * @param {(Array<function(...?)>|function(...?)|number|void)?} plugin\n   */\n  function use(plugin) {\n    switch (plugin) {\n      case void 0:\n      case null:\n        {\n          plugged = plugins.length = 0;\n          break;\n        }\n      default:\n        {\n          if (typeof plugin === 'function') {\n            plugins[plugged++] = plugin;\n          } else if (typeof plugin === 'object') {\n            for (var i = 0, length = plugin.length; i < length; ++i) {\n              use(plugin[i]);\n            }\n          } else {\n            unkwn = !!plugin | 0;\n          }\n        }\n    }\n    return use;\n  }\n\n  /**\n   * Set\n   *\n   * @param {*} options\n   */\n  function set(options) {\n    for (var name in options) {\n      var value = options[name];\n      switch (name) {\n        case 'keyframe':\n          keyed = value | 0;\n          break;\n        case 'global':\n          escape = value | 0;\n          break;\n        case 'cascade':\n          cascade = value | 0;\n          break;\n        case 'compress':\n          compress = value | 0;\n          break;\n        case 'semicolon':\n          semicolon = value | 0;\n          break;\n        case 'preserve':\n          preserve = value | 0;\n          break;\n        case 'prefix':\n          should = null;\n          if (!value) {\n            prefix = 0;\n          } else if (typeof value !== 'function') {\n            prefix = 1;\n          } else {\n            prefix = 2;\n            should = value;\n          }\n      }\n    }\n    return set;\n  }\n\n  /**\n   * Stylis\n   *\n   * @param {string} selector\n   * @param {string} input\n   * @return {*}\n   */\n  function stylis(selector, input) {\n    if (this !== void 0 && this.constructor === stylis) {\n      return factory(selector);\n    }\n\n    // setup\n    var ns = selector;\n    var code = ns.charCodeAt(0);\n\n    // trim leading whitespace\n    if (code < 33) {\n      code = (ns = ns.trim()).charCodeAt(0);\n    }\n\n    // keyframe/animation namespace\n    if (keyed > 0) {\n      key = ns.replace(invalidptn, code === OPENBRACKET ? '' : '-');\n    }\n\n    // reset, used to assert if a plugin is moneky-patching the return value\n    code = 1;\n\n    // cascade/isolate\n    if (cascade === 1) {\n      nscope = ns;\n    } else {\n      nscopealt = ns;\n    }\n    var selectors = [nscope];\n    var result;\n\n    // execute plugins, pre-process context\n    if (plugged > 0) {\n      result = proxy(PREPS, input, selectors, selectors, line, column, 0, 0, 0, 0);\n      if (result !== void 0 && typeof result === 'string') {\n        input = result;\n      }\n    }\n\n    // build\n    var output = compile(array, selectors, input, 0, 0);\n\n    // execute plugins, post-process context\n    if (plugged > 0) {\n      result = proxy(POSTS, output, selectors, selectors, line, column, output.length, 0, 0, 0);\n\n      // bypass minification\n      if (result !== void 0 && typeof (output = result) !== 'string') {\n        code = 0;\n      }\n    }\n\n    // reset\n    key = '';\n    nscope = '';\n    nscopealt = '';\n    pattern = 0;\n    line = 1;\n    column = 1;\n    return compress * code === 0 ? output : minify(output);\n  }\n  stylis['use'] = use;\n  stylis['set'] = set;\n  if (options !== void 0) {\n    set(options);\n  }\n  return stylis;\n});","map":{"version":3,"names":["factory","exports","module","define","window","options","nullptn","formatptn","colonptn","cursorptn","transformptn","animationptn","propertiesptn","elementptn","selectorptn","andptn","escapeptn","invalidptn","keyframeptn","plcholdrptn","readonlyptn","beforeptn","afterptn","tailptn","whiteptn","pseudoptn","writingptn","gradientptn","supportsptn","propertyptn","selfptn","pseudofmt","trimptn","dimensionptn","imgsrcptn","webkit","moz","ms","SEMICOLON","CLOSEBRACES","OPENBRACES","OPENPARENTHESES","CLOSEPARENTHESES","OPENBRACKET","CLOSEBRACKET","NEWLINE","CARRIAGE","TAB","AT","SPACE","AND","DASH","UNDERSCORE","STAR","COMMA","COLON","SINGLEQUOTE","DOUBLEQUOTE","FOWARDSLASH","GREATERTHAN","PLUS","TILDE","NULL","FORMFEED","VERTICALTAB","KEYFRAME","MEDIA","SUPPORTS","PLACEHOLDER","READONLY","IMPORT","CHARSET","DOCUMENT","PAGE","column","line","pattern","cascade","prefix","escape","compress","semicolon","preserve","array","plugins","plugged","should","POSTS","PREPS","UNKWN","PROPS","BLCKS","ATRUL","unkwn","keyed","key","nscopealt","nscope","compile","parent","current","body","id","depth","bracket","comment","parentheses","quote","first","second","code","tail","trail","peak","counter","context","atrule","pseudo","caret","format","insert","invert","length","eof","eol","char","chars","child","out","children","flat","selector","result","charCodeAt","replace","trim","charAt","delimited","substring","select","proxy","join","supports","vendor","property","isolate","selectors","split","l","i","scope","j","k","level","indexOf","input","third","index","hash","cache","animation","test","content","value","match","group","declare","list","items","isNaN","parseFloat","Array","padding","element","elements","size","parents","at","next","call","stylis","type","minify","output","use","plugin","set","name","constructor","ns"],"sources":["C:/Users/CHAOS/Documents/GitHub/labelbox-web-app/frontend/node_modules/stylis/stylis.js"],"sourcesContent":["/*\n *          __        ___\n *    _____/ /___  __/ (_)____\n *   / ___/ __/ / / / / / ___/\n *  (__  ) /_/ /_/ / / (__  )\n * /____/\\__/\\__, /_/_/____/\n *          /____/\n *\n * light - weight css preprocessor @licence MIT\n */\n(function (factory) {/* eslint-disable */\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? (module['exports'] = factory(null)) :\n\t\ttypeof define === 'function' && define['amd'] ? define(factory(null)) :\n\t\t\t(window['stylis'] = factory(null))\n}(/** @param {*=} options */function factory (options) {/* eslint-disable */\n\n\t'use strict'\n\n\t/**\n\t * Notes\n\t *\n\t * The ['<method name>'] pattern is used to support closure compiler\n\t * the jsdoc signatures are also used to the same effect\n\t *\n\t * ----\n\t *\n\t * int + int + int === n4 [faster]\n\t *\n\t * vs\n\t *\n\t * int === n1 && int === n2 && int === n3\n\t *\n\t * ----\n\t *\n\t * switch (int) { case ints...} [faster]\n\t *\n\t * vs\n\t *\n\t * if (int == 1 && int === 2 ...)\n\t *\n\t * ----\n\t *\n\t * The (first*n1 + second*n2 + third*n3) format used in the property parser\n\t * is a simple way to hash the sequence of characters\n\t * taking into account the index they occur in\n\t * since any number of 3 character sequences could produce duplicates.\n\t *\n\t * On the other hand sequences that are directly tied to the index of the character\n\t * resolve a far more accurate measure, it's also faster\n\t * to evaluate one condition in a switch statement\n\t * than three in an if statement regardless of the added math.\n\t *\n\t * This allows the vendor prefixer to be both small and fast.\n\t */\n\n\tvar nullptn = /^\\0+/g /* matches leading null characters */\n\tvar formatptn = /[\\0\\r\\f]/g /* matches new line, null and formfeed characters */\n\tvar colonptn = /: */g /* splits animation rules */\n\tvar cursorptn = /zoo|gra/ /* assert cursor varient */\n\tvar transformptn = /([,: ])(transform)/g /* vendor prefix transform, older webkit */\n\tvar animationptn = /,+\\s*(?![^(]*[)])/g /* splits multiple shorthand notation animations */\n\tvar propertiesptn = / +\\s*(?![^(]*[)])/g /* animation properties */\n\tvar elementptn = / *[\\0] */g /* selector elements */\n\tvar selectorptn = /,\\r+?/g /* splits selectors */\n\tvar andptn = /([\\t\\r\\n ])*\\f?&/g /* match & */\n\tvar escapeptn = /:global\\(((?:[^\\(\\)\\[\\]]*|\\[.*\\]|\\([^\\(\\)]*\\))*)\\)/g /* matches :global(.*) */\n\tvar invalidptn = /\\W+/g /* removes invalid characters from keyframes */\n\tvar keyframeptn = /@(k\\w+)\\s*(\\S*)\\s*/ /* matches @keyframes $1 */\n\tvar plcholdrptn = /::(place)/g /* match ::placeholder varient */\n\tvar readonlyptn = /:(read-only)/g /* match :read-only varient */\n\tvar beforeptn = /\\s+(?=[{\\];=:>])/g /* matches \\s before ] ; = : */\n\tvar afterptn = /([[}=:>])\\s+/g /* matches \\s after characters [ } = : */\n\tvar tailptn = /(\\{[^{]+?);(?=\\})/g /* matches tail semi-colons ;} */\n\tvar whiteptn = /\\s{2,}/g /* matches repeating whitespace */\n\tvar pseudoptn = /([^\\(])(:+) */g /* pseudo element */\n\tvar writingptn = /[svh]\\w+-[tblr]{2}/ /* match writing mode property values */\n\tvar gradientptn = /([\\w-]+t\\()/g /* match *gradient property */\n\tvar supportsptn = /\\(\\s*(.*)\\s*\\)/g /* match supports (groups) */\n\tvar propertyptn = /([\\s\\S]*?);/g /* match properties leading semicolon */\n\tvar selfptn = /-self|flex-/g /* match flex- and -self in align-self: flex-*; */\n\tvar pseudofmt = /[^]*?(:[rp][el]a[\\w-]+)[^]*/ /* extrats :readonly or :placholder from selector */\n\tvar trimptn = /[ \\t]+$/ /* match tail whitspace */\n\tvar dimensionptn = /stretch|:\\s*\\w+\\-(?:conte|avail)/ /* match max/min/fit-content, fill-available */\n\tvar imgsrcptn = /([^-])(image-set\\()/\n\n\t/* vendors */\n\tvar webkit = '-webkit-'\n\tvar moz = '-moz-'\n\tvar ms = '-ms-'\n\n\t/* character codes */\n\tvar SEMICOLON = 59 /* ; */\n\tvar CLOSEBRACES = 125 /* } */\n\tvar OPENBRACES = 123 /* { */\n\tvar OPENPARENTHESES = 40 /* ( */\n\tvar CLOSEPARENTHESES = 41 /* ) */\n\tvar OPENBRACKET = 91 /* [ */\n\tvar CLOSEBRACKET = 93 /* ] */\n\tvar NEWLINE = 10 /* \\n */\n\tvar CARRIAGE = 13 /* \\r */\n\tvar TAB = 9 /* \\t */\n\tvar AT = 64 /* @ */\n\tvar SPACE = 32 /*   */\n\tvar AND = 38 /* & */\n\tvar DASH = 45 /* - */\n\tvar UNDERSCORE = 95 /* _ */\n\tvar STAR = 42 /* * */\n\tvar COMMA = 44 /* , */\n\tvar COLON = 58 /* : */\n\tvar SINGLEQUOTE = 39 /* ' */\n\tvar DOUBLEQUOTE = 34 /* \" */\n\tvar FOWARDSLASH = 47 /* / */\n\tvar GREATERTHAN = 62 /* > */\n\tvar PLUS = 43 /* + */\n\tvar TILDE = 126 /* ~ */\n\tvar NULL = 0 /* \\0 */\n\tvar FORMFEED = 12 /* \\f */\n\tvar VERTICALTAB = 11 /* \\v */\n\n\t/* special identifiers */\n\tvar KEYFRAME = 107 /* k */\n\tvar MEDIA = 109 /* m */\n\tvar SUPPORTS = 115 /* s */\n\tvar PLACEHOLDER = 112 /* p */\n\tvar READONLY = 111 /* o */\n\tvar IMPORT = 105 /* <at>i */\n\tvar CHARSET = 99 /* <at>c */\n\tvar DOCUMENT = 100 /* <at>d */\n\tvar PAGE = 112 /* <at>p */\n\n\tvar column = 1 /* current column */\n\tvar line = 1 /* current line numebr */\n\tvar pattern = 0 /* :pattern */\n\n\tvar cascade = 1 /* #id h1 h2 vs h1#id h2#id  */\n\tvar prefix = 1 /* vendor prefix */\n\tvar escape = 1 /* escape :global() pattern */\n\tvar compress = 0 /* compress output */\n\tvar semicolon = 0 /* no/semicolon option */\n\tvar preserve = 0 /* preserve empty selectors */\n\n\t/* empty reference */\n\tvar array = []\n\n\t/* plugins */\n\tvar plugins = []\n\tvar plugged = 0\n\tvar should = null\n\n\t/* plugin context */\n\tvar POSTS = -2\n\tvar PREPS = -1\n\tvar UNKWN = 0\n\tvar PROPS = 1\n\tvar BLCKS = 2\n\tvar ATRUL = 3\n\n\t/* plugin newline context */\n\tvar unkwn = 0\n\n\t/* keyframe animation */\n\tvar keyed = 1\n\tvar key = ''\n\n\t/* selector namespace */\n\tvar nscopealt = ''\n\tvar nscope = ''\n\n\t/**\n\t * Compile\n\t *\n\t * @param {Array<string>} parent\n\t * @param {Array<string>} current\n\t * @param {string} body\n\t * @param {number} id\n\t * @param {number} depth\n\t * @return {string}\n\t */\n\tfunction compile (parent, current, body, id, depth) {\n\t\tvar bracket = 0 /* brackets [] */\n\t\tvar comment = 0 /* comments /* // or /* */\n\t\tvar parentheses = 0 /* functions () */\n\t\tvar quote = 0 /* quotes '', \"\" */\n\n\t\tvar first = 0 /* first character code */\n\t\tvar second = 0 /* second character code */\n\t\tvar code = 0 /* current character code */\n\t\tvar tail = 0 /* previous character code */\n\t\tvar trail = 0 /* character before previous code */\n\t\tvar peak = 0 /* previous non-whitespace code */\n\n\t\tvar counter = 0 /* count sequence termination */\n\t\tvar context = 0 /* track current context */\n\t\tvar atrule = 0 /* track @at-rule context */\n\t\tvar pseudo = 0 /* track pseudo token index */\n\t\tvar caret = 0 /* current character index */\n\t\tvar format = 0 /* control character formating context */\n\t\tvar insert = 0 /* auto semicolon insertion */\n\t\tvar invert = 0 /* inverted selector pattern */\n\t\tvar length = 0 /* generic length address */\n\t\tvar eof = body.length /* end of file(length) */\n\t\tvar eol = eof - 1 /* end of file(characters) */\n\n\t\tvar char = '' /* current character */\n\t\tvar chars = '' /* current buffer of characters */\n\t\tvar child = '' /* next buffer of characters */\n\t\tvar out = '' /* compiled body */\n\t\tvar children = '' /* compiled children */\n\t\tvar flat = '' /* compiled leafs */\n\t\tvar selector /* generic selector address */\n\t\tvar result /* generic address */\n\n\t\t// ...build body\n\t\twhile (caret < eof) {\n\t\t\tcode = body.charCodeAt(caret)\n\n\t\t\t// eof varient\n\t\t\tif (caret === eol) {\n\t\t\t\t// last character + noop context, add synthetic padding for noop context to terminate\n\t\t\t\tif (comment + quote + parentheses + bracket !== 0) {\n\t\t\t\t\tif (comment !== 0) {\n\t\t\t\t\t\tcode = comment === FOWARDSLASH ? NEWLINE : FOWARDSLASH\n\t\t\t\t\t}\n\n\t\t\t\t\tquote = parentheses = bracket = 0\n\t\t\t\t\teof++\n\t\t\t\t\teol++\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (comment + quote + parentheses + bracket === 0) {\n\t\t\t\t// eof varient\n\t\t\t\tif (caret === eol) {\n\t\t\t\t\tif (format > 0) {\n\t\t\t\t\t\tchars = chars.replace(formatptn, '')\n\t\t\t\t\t}\n\n\t\t\t\t\tif (chars.trim().length > 0) {\n\t\t\t\t\t\tswitch (code) {\n\t\t\t\t\t\t\tcase SPACE:\n\t\t\t\t\t\t\tcase TAB:\n\t\t\t\t\t\t\tcase SEMICOLON:\n\t\t\t\t\t\t\tcase CARRIAGE:\n\t\t\t\t\t\t\tcase NEWLINE: {\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tchars += body.charAt(caret)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcode = SEMICOLON\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// auto semicolon insertion\n\t\t\t\tif (insert === 1) {\n\t\t\t\t\tswitch (code) {\n\t\t\t\t\t\t// false flags\n\t\t\t\t\t\tcase OPENBRACES:\n\t\t\t\t\t\tcase CLOSEBRACES:\n\t\t\t\t\t\tcase SEMICOLON:\n\t\t\t\t\t\tcase DOUBLEQUOTE:\n\t\t\t\t\t\tcase SINGLEQUOTE:\n\t\t\t\t\t\tcase OPENPARENTHESES:\n\t\t\t\t\t\tcase CLOSEPARENTHESES:\n\t\t\t\t\t\tcase COMMA: {\n\t\t\t\t\t\t\tinsert = 0\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tcase TAB:\n\t\t\t\t\t\tcase CARRIAGE:\n\t\t\t\t\t\tcase NEWLINE:\n\t\t\t\t\t\tcase SPACE: {\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// valid\n\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\tinsert = 0\n\t\t\t\t\t\t\tlength = caret\n\t\t\t\t\t\t\tfirst = code\n\t\t\t\t\t\t\tcaret--\n\t\t\t\t\t\t\tcode = SEMICOLON\n\n\t\t\t\t\t\t\twhile (length < eof) {\n\t\t\t\t\t\t\t\tswitch (body.charCodeAt(length++)) {\n\t\t\t\t\t\t\t\t\tcase NEWLINE:\n\t\t\t\t\t\t\t\t\tcase CARRIAGE:\n\t\t\t\t\t\t\t\t\tcase SEMICOLON: {\n\t\t\t\t\t\t\t\t\t\t++caret\n\t\t\t\t\t\t\t\t\t\tcode = first\n\t\t\t\t\t\t\t\t\t\tlength = eof\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcase COLON: {\n\t\t\t\t\t\t\t\t\t\tif (format > 0) {\n\t\t\t\t\t\t\t\t\t\t\t++caret\n\t\t\t\t\t\t\t\t\t\t\tcode = first\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tcase OPENBRACES: {\n\t\t\t\t\t\t\t\t\t\tlength = eof\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// token varient\n\t\t\t\tswitch (code) {\n\t\t\t\t\tcase OPENBRACES: {\n\t\t\t\t\t\tchars = chars.trim()\n\t\t\t\t\t\tfirst = chars.charCodeAt(0)\n\t\t\t\t\t\tcounter = 1\n\t\t\t\t\t\tlength = ++caret\n\n\t\t\t\t\t\twhile (caret < eof) {\n\t\t\t\t\t\t\tswitch (code = body.charCodeAt(caret)) {\n\t\t\t\t\t\t\t\tcase OPENBRACES: {\n\t\t\t\t\t\t\t\t\tcounter++\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase CLOSEBRACES: {\n\t\t\t\t\t\t\t\t\tcounter--\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase FOWARDSLASH: {\n\t\t\t\t\t\t\t\t\tswitch (second = body.charCodeAt(caret + 1)) {\n\t\t\t\t\t\t\t\t\t\t// /*, //\n\t\t\t\t\t\t\t\t\t\tcase STAR:\n\t\t\t\t\t\t\t\t\t\tcase FOWARDSLASH: {\n\t\t\t\t\t\t\t\t\t\t\tcaret = delimited(second, caret, eol, body)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// given \"[\" === 91 & \"]\" === 93 hence forth 91 + 1 + 1 === 93\n\t\t\t\t\t\t\t\tcase OPENBRACKET: {\n\t\t\t\t\t\t\t\t\tcode++\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// given \"(\" === 40 & \")\" === 41 hence forth 40 + 1 === 41\n\t\t\t\t\t\t\t\tcase OPENPARENTHESES: {\n\t\t\t\t\t\t\t\t\tcode++\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// quote tail delimiter is identical to the head delimiter hence noop,\n\t\t\t\t\t\t\t\t// fallthrough clauses have been shifted to the correct tail delimiter\n\t\t\t\t\t\t\t\tcase DOUBLEQUOTE:\n\t\t\t\t\t\t\t\tcase SINGLEQUOTE: {\n\t\t\t\t\t\t\t\t\twhile (caret++ < eol) {\n\t\t\t\t\t\t\t\t\t\tif (body.charCodeAt(caret) === code) {\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (counter === 0) {\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcaret++\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchild = body.substring(length, caret)\n\n\t\t\t\t\t\tif (first === NULL) {\n\t\t\t\t\t\t\tfirst = (chars = chars.replace(nullptn, '').trim()).charCodeAt(0)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch (first) {\n\t\t\t\t\t\t\t// @at-rule\n\t\t\t\t\t\t\tcase AT: {\n\t\t\t\t\t\t\t\tif (format > 0) {\n\t\t\t\t\t\t\t\t\tchars = chars.replace(formatptn, '')\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tsecond = chars.charCodeAt(1)\n\n\t\t\t\t\t\t\t\tswitch (second) {\n\t\t\t\t\t\t\t\t\tcase DOCUMENT:\n\t\t\t\t\t\t\t\t\tcase MEDIA:\n\t\t\t\t\t\t\t\t\tcase SUPPORTS:\n\t\t\t\t\t\t\t\t\tcase DASH: {\n\t\t\t\t\t\t\t\t\t\tselector = current\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\tselector = array\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tchild = compile(current, selector, child, second, depth+1)\n\t\t\t\t\t\t\t\tlength = child.length\n\n\t\t\t\t\t\t\t\t// preserve empty @at-rule\n\t\t\t\t\t\t\t\tif (preserve > 0 && length === 0) {\n\t\t\t\t\t\t\t\t\tlength = chars.length\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// execute plugins, @at-rule context\n\t\t\t\t\t\t\t\tif (plugged > 0) {\n\t\t\t\t\t\t\t\t\tselector = select(array, chars, invert)\n\t\t\t\t\t\t\t\t\tresult = proxy(ATRUL, child, selector, current, line, column, length, second, depth, id)\n\t\t\t\t\t\t\t\t\tchars = selector.join('')\n\n\t\t\t\t\t\t\t\t\tif (result !== void 0) {\n\t\t\t\t\t\t\t\t\t\tif ((length = (child = result.trim()).length) === 0) {\n\t\t\t\t\t\t\t\t\t\t\tsecond = 0\n\t\t\t\t\t\t\t\t\t\t\tchild = ''\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif (length > 0) {\n\t\t\t\t\t\t\t\t\tswitch (second) {\n\t\t\t\t\t\t\t\t\t\tcase SUPPORTS: {\n\t\t\t\t\t\t\t\t\t\t\tchars = chars.replace(supportsptn, supports)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcase DOCUMENT:\n\t\t\t\t\t\t\t\t\t\tcase MEDIA:\n\t\t\t\t\t\t\t\t\t\tcase DASH: {\n\t\t\t\t\t\t\t\t\t\t\tchild = chars + '{' + child + '}'\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tcase KEYFRAME: {\n\t\t\t\t\t\t\t\t\t\t\tchars = chars.replace(keyframeptn, '$1 $2' + (keyed > 0 ? key : ''))\n\t\t\t\t\t\t\t\t\t\t\tchild = chars + '{' + child + '}'\n\n\t\t\t\t\t\t\t\t\t\t\tif (prefix === 1 || (prefix === 2 && vendor('@'+child, 3))) {\n\t\t\t\t\t\t\t\t\t\t\t\tchild = '@' + webkit + child + '@' + child\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\tchild = '@' + child\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\tchild = chars + child\n\n\t\t\t\t\t\t\t\t\t\t\tif (id === PAGE) {\n\t\t\t\t\t\t\t\t\t\t\t\tchild = (out += child, '')\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tchild = ''\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// selector\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tchild = compile(current, select(current, chars, invert), child, id, depth+1)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tchildren += child\n\n\t\t\t\t\t\t// reset\n\t\t\t\t\t\tcontext = 0\n\t\t\t\t\t\tinsert = 0\n\t\t\t\t\t\tpseudo = 0\n\t\t\t\t\t\tformat = 0\n\t\t\t\t\t\tinvert = 0\n\t\t\t\t\t\tatrule = 0\n\t\t\t\t\t\tchars = ''\n\t\t\t\t\t\tchild = ''\n\t\t\t\t\t\tcode = body.charCodeAt(++caret)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcase CLOSEBRACES:\n\t\t\t\t\tcase SEMICOLON: {\n\t\t\t\t\t\tchars = (format > 0 ? chars.replace(formatptn, '') : chars).trim()\n\n\t\t\t\t\t\tif ((length = chars.length) > 1) {\n\t\t\t\t\t\t\t// monkey-patch missing colon\n\t\t\t\t\t\t\tif (pseudo === 0) {\n\t\t\t\t\t\t\t\tfirst = chars.charCodeAt(0)\n\n\t\t\t\t\t\t\t\t// first character is a letter or dash, buffer has a space character\n\t\t\t\t\t\t\t\tif ((first === DASH || first > 96 && first < 123)) {\n\t\t\t\t\t\t\t\t\tlength = (chars = chars.replace(' ', ':')).length\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// execute plugins, property context\n\t\t\t\t\t\t\tif (plugged > 0) {\n\t\t\t\t\t\t\t\tif ((result = proxy(PROPS, chars, current, parent, line, column, out.length, id, depth, id)) !== void 0) {\n\t\t\t\t\t\t\t\t\tif ((length = (chars = result.trim()).length) === 0) {\n\t\t\t\t\t\t\t\t\t\tchars = '\\0\\0'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tfirst = chars.charCodeAt(0)\n\t\t\t\t\t\t\tsecond = chars.charCodeAt(1)\n\n\t\t\t\t\t\t\tswitch (first) {\n\t\t\t\t\t\t\t\tcase NULL: {\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase AT: {\n\t\t\t\t\t\t\t\t\tif (second === IMPORT || second === CHARSET) {\n\t\t\t\t\t\t\t\t\t\tflat += chars + body.charAt(caret)\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\tif (chars.charCodeAt(length-1) === COLON) {\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tout += property(chars, first, second, chars.charCodeAt(2))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// reset\n\t\t\t\t\t\tcontext = 0\n\t\t\t\t\t\tinsert = 0\n\t\t\t\t\t\tpseudo = 0\n\t\t\t\t\t\tformat = 0\n\t\t\t\t\t\tinvert = 0\n\t\t\t\t\t\tchars = ''\n\t\t\t\t\t\tcode = body.charCodeAt(++caret)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// parse characters\n\t\t\tswitch (code) {\n\t\t\t\tcase CARRIAGE:\n\t\t\t\tcase NEWLINE: {\n\t\t\t\t\t// auto insert semicolon\n\t\t\t\t\tif (comment + quote + parentheses + bracket + semicolon === 0) {\n\t\t\t\t\t\t// valid non-whitespace characters that\n\t\t\t\t\t\t// may precede a newline\n\t\t\t\t\t\tswitch (peak) {\n\t\t\t\t\t\t\tcase CLOSEPARENTHESES:\n\t\t\t\t\t\t\tcase SINGLEQUOTE:\n\t\t\t\t\t\t\tcase DOUBLEQUOTE:\n\t\t\t\t\t\t\tcase AT:\n\t\t\t\t\t\t\tcase TILDE:\n\t\t\t\t\t\t\tcase GREATERTHAN:\n\t\t\t\t\t\t\tcase STAR:\n\t\t\t\t\t\t\tcase PLUS:\n\t\t\t\t\t\t\tcase FOWARDSLASH:\n\t\t\t\t\t\t\tcase DASH:\n\t\t\t\t\t\t\tcase COLON:\n\t\t\t\t\t\t\tcase COMMA:\n\t\t\t\t\t\t\tcase SEMICOLON:\n\t\t\t\t\t\t\tcase OPENBRACES:\n\t\t\t\t\t\t\tcase CLOSEBRACES: {\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t// current buffer has a colon\n\t\t\t\t\t\t\t\tif (pseudo > 0) {\n\t\t\t\t\t\t\t\t\tinsert = 1\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// terminate line comment\n\t\t\t\t\tif (comment === FOWARDSLASH) {\n\t\t\t\t\t\tcomment = 0\n\t\t\t\t\t} else if (cascade + context === 0 && id !== KEYFRAME && chars.length > 0) {\n\t\t\t\t\t\tformat = 1\n\t\t\t\t\t\tchars += '\\0'\n\t\t\t\t\t}\n\n\t\t\t\t\t// execute plugins, newline context\n\t\t\t\t\tif (plugged * unkwn > 0) {\n\t\t\t\t\t\tproxy(UNKWN, chars, current, parent, line, column, out.length, id, depth, id)\n\t\t\t\t\t}\n\n\t\t\t\t\t// next line, reset column position\n\t\t\t\t\tcolumn = 1\n\t\t\t\t\tline++\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase SEMICOLON:\n\t\t\t\tcase CLOSEBRACES: {\n\t\t\t\t\tif (comment + quote + parentheses + bracket === 0) {\n\t\t\t\t\t\tcolumn++\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\t// increment column position\n\t\t\t\t\tcolumn++\n\n\t\t\t\t\t// current character\n\t\t\t\t\tchar = body.charAt(caret)\n\n\t\t\t\t\t// remove comments, escape functions, strings, attributes and prepare selectors\n\t\t\t\t\tswitch (code) {\n\t\t\t\t\t\tcase TAB:\n\t\t\t\t\t\tcase SPACE: {\n\t\t\t\t\t\t\tif (quote + bracket + comment === 0) {\n\t\t\t\t\t\t\t\tswitch (tail) {\n\t\t\t\t\t\t\t\t\tcase COMMA:\n\t\t\t\t\t\t\t\t\tcase COLON:\n\t\t\t\t\t\t\t\t\tcase TAB:\n\t\t\t\t\t\t\t\t\tcase SPACE: {\n\t\t\t\t\t\t\t\t\t\tchar = ''\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\tif (code !== SPACE) {\n\t\t\t\t\t\t\t\t\t\t\tchar = ' '\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// escape breaking control characters\n\t\t\t\t\t\tcase NULL: {\n\t\t\t\t\t\t\tchar = '\\\\0'\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase FORMFEED: {\n\t\t\t\t\t\t\tchar = '\\\\f'\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase VERTICALTAB: {\n\t\t\t\t\t\t\tchar = '\\\\v'\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// &\n\t\t\t\t\t\tcase AND: {\n\t\t\t\t\t\t\t// inverted selector pattern i.e html &\n\t\t\t\t\t\t\tif (quote + comment + bracket === 0 && cascade > 0) {\n\t\t\t\t\t\t\t\tinvert = 1\n\t\t\t\t\t\t\t\tformat = 1\n\t\t\t\t\t\t\t\tchar = '\\f' + char\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// ::p<l>aceholder, l\n\t\t\t\t\t\t// :read-on<l>y, l\n\t\t\t\t\t\tcase 108: {\n\t\t\t\t\t\t\tif (quote + comment + bracket + pattern === 0 && pseudo > 0) {\n\t\t\t\t\t\t\t\tswitch (caret - pseudo) {\n\t\t\t\t\t\t\t\t\t// ::placeholder\n\t\t\t\t\t\t\t\t\tcase 2: {\n\t\t\t\t\t\t\t\t\t\tif (tail === PLACEHOLDER && body.charCodeAt(caret-3) === COLON) {\n\t\t\t\t\t\t\t\t\t\t\tpattern = tail\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// :read-only\n\t\t\t\t\t\t\t\t\tcase 8: {\n\t\t\t\t\t\t\t\t\t\tif (trail === READONLY) {\n\t\t\t\t\t\t\t\t\t\t\tpattern = trail\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// :<pattern>\n\t\t\t\t\t\tcase COLON: {\n\t\t\t\t\t\t\tif (quote + comment + bracket === 0) {\n\t\t\t\t\t\t\t\tpseudo = caret\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// selectors\n\t\t\t\t\t\tcase COMMA: {\n\t\t\t\t\t\t\tif (comment + parentheses + quote + bracket === 0) {\n\t\t\t\t\t\t\t\tformat = 1\n\t\t\t\t\t\t\t\tchar += '\\r'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// quotes\n\t\t\t\t\t\tcase DOUBLEQUOTE:\n\t\t\t\t\t\tcase SINGLEQUOTE: {\n\t\t\t\t\t\t\tif (comment === 0) {\n\t\t\t\t\t\t\t\tquote = quote === code ? 0 : (quote === 0 ? code : quote)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// attributes\n\t\t\t\t\t\tcase OPENBRACKET: {\n\t\t\t\t\t\t\tif (quote + comment + parentheses === 0) {\n\t\t\t\t\t\t\t\tbracket++\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase CLOSEBRACKET: {\n\t\t\t\t\t\t\tif (quote + comment + parentheses === 0) {\n\t\t\t\t\t\t\t\tbracket--\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// functions\n\t\t\t\t\t\tcase CLOSEPARENTHESES: {\n\t\t\t\t\t\t\tif (quote + comment + bracket === 0) {\n\t\t\t\t\t\t\t\tparentheses--\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase OPENPARENTHESES: {\n\t\t\t\t\t\t\tif (quote + comment + bracket === 0) {\n\t\t\t\t\t\t\t\tif (context === 0) {\n\t\t\t\t\t\t\t\t\tswitch (tail*2 + trail*3) {\n\t\t\t\t\t\t\t\t\t\t// :matches\n\t\t\t\t\t\t\t\t\t\tcase 533: {\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// :global, :not, :nth-child etc...\n\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\tcounter = 0\n\t\t\t\t\t\t\t\t\t\t\tcontext = 1\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tparentheses++\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase AT: {\n\t\t\t\t\t\t\tif (comment + parentheses + quote + bracket + pseudo + atrule === 0) {\n\t\t\t\t\t\t\t\tatrule = 1\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// block/line comments\n\t\t\t\t\t\tcase STAR:\n\t\t\t\t\t\tcase FOWARDSLASH: {\n\t\t\t\t\t\t\tif (quote + bracket + parentheses > 0) {\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tswitch (comment) {\n\t\t\t\t\t\t\t\t// initialize line/block comment context\n\t\t\t\t\t\t\t\tcase 0: {\n\t\t\t\t\t\t\t\t\tswitch (code*2 + body.charCodeAt(caret+1)*3) {\n\t\t\t\t\t\t\t\t\t\t// //\n\t\t\t\t\t\t\t\t\t\tcase 235: {\n\t\t\t\t\t\t\t\t\t\t\tcomment = FOWARDSLASH\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// /*\n\t\t\t\t\t\t\t\t\t\tcase 220: {\n\t\t\t\t\t\t\t\t\t\t\tlength = caret\n\t\t\t\t\t\t\t\t\t\t\tcomment = STAR\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// end block comment context\n\t\t\t\t\t\t\t\tcase STAR: {\n\t\t\t\t\t\t\t\t\tif (code === FOWARDSLASH && tail === STAR && length + 2 !== caret) {\n\t\t\t\t\t\t\t\t\t\t// /*<!> ... */, !\n\t\t\t\t\t\t\t\t\t\tif (body.charCodeAt(length+2) === 33) {\n\t\t\t\t\t\t\t\t\t\t\tout += body.substring(length, caret+1)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tchar = ''\n\t\t\t\t\t\t\t\t\t\tcomment = 0\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// ignore comment blocks\n\t\t\t\t\tif (comment === 0) {\n\t\t\t\t\t\t// aggressive isolation mode, divide each individual selector\n\t\t\t\t\t\t// including selectors in :not function but excluding selectors in :global function\n\t\t\t\t\t\tif (cascade + quote + bracket + atrule === 0 && id !== KEYFRAME && code !== SEMICOLON) {\n\t\t\t\t\t\t\tswitch (code) {\n\t\t\t\t\t\t\t\tcase COMMA:\n\t\t\t\t\t\t\t\tcase TILDE:\n\t\t\t\t\t\t\t\tcase GREATERTHAN:\n\t\t\t\t\t\t\t\tcase PLUS:\n\t\t\t\t\t\t\t\tcase CLOSEPARENTHESES:\n\t\t\t\t\t\t\t\tcase OPENPARENTHESES: {\n\t\t\t\t\t\t\t\t\tif (context === 0) {\n\t\t\t\t\t\t\t\t\t\t// outside of an isolated context i.e nth-child(<...>)\n\t\t\t\t\t\t\t\t\t\tswitch (tail) {\n\t\t\t\t\t\t\t\t\t\t\tcase TAB:\n\t\t\t\t\t\t\t\t\t\t\tcase SPACE:\n\t\t\t\t\t\t\t\t\t\t\tcase NEWLINE:\n\t\t\t\t\t\t\t\t\t\t\tcase CARRIAGE: {\n\t\t\t\t\t\t\t\t\t\t\t\tchar = char + '\\0'\n\t\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\t\tchar = '\\0' + char + (code === COMMA ? '' : '\\0')\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tformat = 1\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t// within an isolated context, sleep untill it's terminated\n\t\t\t\t\t\t\t\t\t\tswitch (code) {\n\t\t\t\t\t\t\t\t\t\t\tcase OPENPARENTHESES: {\n\t\t\t\t\t\t\t\t\t\t\t\t// :globa<l>(\n\t\t\t\t\t\t\t\t\t\t\t\tif (pseudo + 7 === caret && tail === 108) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tpseudo = 0\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tcontext = ++counter\n\t\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tcase CLOSEPARENTHESES: {\n\t\t\t\t\t\t\t\t\t\t\t\tif ((context = --counter) === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tformat = 1\n\t\t\t\t\t\t\t\t\t\t\t\t\tchar += '\\0'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcase TAB:\n\t\t\t\t\t\t\t\tcase SPACE: {\n\t\t\t\t\t\t\t\t\tswitch (tail) {\n\t\t\t\t\t\t\t\t\t\tcase NULL:\n\t\t\t\t\t\t\t\t\t\tcase OPENBRACES:\n\t\t\t\t\t\t\t\t\t\tcase CLOSEBRACES:\n\t\t\t\t\t\t\t\t\t\tcase SEMICOLON:\n\t\t\t\t\t\t\t\t\t\tcase COMMA:\n\t\t\t\t\t\t\t\t\t\tcase FORMFEED:\n\t\t\t\t\t\t\t\t\t\tcase TAB:\n\t\t\t\t\t\t\t\t\t\tcase SPACE:\n\t\t\t\t\t\t\t\t\t\tcase NEWLINE:\n\t\t\t\t\t\t\t\t\t\tcase CARRIAGE: {\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\t// ignore in isolated contexts\n\t\t\t\t\t\t\t\t\t\t\tif (context === 0) {\n\t\t\t\t\t\t\t\t\t\t\t\tformat = 1\n\t\t\t\t\t\t\t\t\t\t\t\tchar += '\\0'\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// concat buffer of characters\n\t\t\t\t\t\tchars += char\n\n\t\t\t\t\t\t// previous non-whitespace character code\n\t\t\t\t\t\tif (code !== SPACE && code !== TAB) {\n\t\t\t\t\t\t\tpeak = code\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// tail character codes\n\t\t\ttrail = tail\n\t\t\ttail = code\n\n\t\t\t// visit every character\n\t\t\tcaret++\n\t\t}\n\n\t\tlength = out.length\n\n\t\t// preserve empty selector\n \t\tif (preserve > 0) {\n \t\t\tif (length === 0 && children.length === 0 && (current[0].length === 0) === false) {\n \t\t\t\tif (id !== MEDIA || (current.length === 1 && (cascade > 0 ? nscopealt : nscope) === current[0])) {\n\t\t\t\t\tlength = current.join(',').length + 2\n \t\t\t\t}\n \t\t\t}\n\t\t}\n\n\t\tif (length > 0) {\n\t\t\t// cascade isolation mode?\n\t\t\tselector = cascade === 0 && id !== KEYFRAME ? isolate(current) : current\n\n\t\t\t// execute plugins, block context\n\t\t\tif (plugged > 0) {\n\t\t\t\tresult = proxy(BLCKS, out, selector, parent, line, column, length, id, depth, id)\n\n\t\t\t\tif (result !== void 0 && (out = result).length === 0) {\n\t\t\t\t\treturn flat + out + children\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tout = selector.join(',') + '{' + out + '}'\n\n\t\t\tif (prefix*pattern !== 0) {\n\t\t\t\tif (prefix === 2 && !vendor(out, 2))\n\t\t\t\t\tpattern = 0\n\n\t\t\t\tswitch (pattern) {\n\t\t\t\t\t// ::read-only\n\t\t\t\t\tcase READONLY: {\n\t\t\t\t\t\tout = out.replace(readonlyptn, ':'+moz+'$1')+out\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\t// ::placeholder\n\t\t\t\t\tcase PLACEHOLDER: {\n\t\t\t\t\t\tout = (\n\t\t\t\t\t\t\tout.replace(plcholdrptn, '::' + webkit + 'input-$1') +\n\t\t\t\t\t\t\tout.replace(plcholdrptn, '::' + moz + '$1') +\n\t\t\t\t\t\t\tout.replace(plcholdrptn, ':' + ms + 'input-$1') + out\n\t\t\t\t\t\t)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tpattern = 0\n\t\t\t}\n\t\t}\n\n\t\treturn flat + out + children\n\t}\n\n\t/**\n\t * Select\n\t *\n\t * @param {Array<string>} parent\n\t * @param {string} current\n\t * @param {number} invert\n\t * @return {Array<string>}\n\t */\n\tfunction select (parent, current, invert) {\n\t\tvar selectors = current.trim().split(selectorptn)\n\t\tvar out = selectors\n\n\t\tvar length = selectors.length\n\t\tvar l = parent.length\n\n\t\tswitch (l) {\n\t\t\t// 0-1 parent selectors\n\t\t\tcase 0:\n\t\t\tcase 1: {\n\t\t\t\tfor (var i = 0, selector = l === 0 ? '' : parent[0] + ' '; i < length; ++i) {\n\t\t\t\t\tout[i] = scope(selector, out[i], invert, l).trim()\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// >2 parent selectors, nested\n\t\t\tdefault: {\n\t\t\t\tfor (var i = 0, j = 0, out = []; i < length; ++i) {\n\t\t\t\t\tfor (var k = 0; k < l; ++k) {\n\t\t\t\t\t\tout[j++] = scope(parent[k] + ' ', selectors[i], invert, l).trim()\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn out\n\t}\n\n\t/**\n\t * Scope\n\t *\n\t * @param {string} parent\n\t * @param {string} current\n\t * @param {number} invert\n\t * @param {number} level\n\t * @return {string}\n\t */\n\tfunction scope (parent, current, invert, level) {\n\t\tvar selector = current\n\t\tvar code = selector.charCodeAt(0)\n\n\t\t// trim leading whitespace\n\t\tif (code < 33) {\n\t\t\tcode = (selector = selector.trim()).charCodeAt(0)\n\t\t}\n\n\t\tswitch (code) {\n\t\t\t// &\n\t\t\tcase AND: {\n\t\t\t\tswitch (cascade + level) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\tcase 1: {\n\t\t\t\t\t\tif (parent.trim().length === 0) {\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\treturn selector.replace(andptn, '$1'+parent.trim())\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// :\n\t\t\tcase COLON: {\n\t\t\t\tswitch (selector.charCodeAt(1)) {\n\t\t\t\t\t// g in :global\n\t\t\t\t\tcase 103: {\n\t\t\t\t\t\tif (escape > 0 && cascade > 0) {\n\t\t\t\t\t\t\treturn selector.replace(escapeptn, '$1').replace(andptn, '$1'+nscope)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t// :hover\n\t\t\t\t\t\treturn parent.trim() + selector.replace(andptn, '$1'+parent.trim())\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\t// html &\n\t\t\t\tif (invert*cascade > 0 && selector.indexOf('\\f') > 0) {\n\t\t\t\t\treturn selector.replace(andptn, (parent.charCodeAt(0) === COLON ? '' : '$1')+parent.trim())\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn parent + selector\n\t}\n\n\t/**\n\t * Property\n\t *\n\t * @param {string} input\n\t * @param {number} first\n\t * @param {number} second\n\t * @param {number} third\n\t * @return {string}\n\t */\n\tfunction property (input, first, second, third) {\n\t\tvar index = 0\n\t\tvar out = input + ';'\n\t\tvar hash = (first*2) + (second*3) + (third*4)\n\t\tvar cache\n\n\t\t// animation: a, n, i characters\n\t\tif (hash === 944) {\n\t\t\treturn animation(out)\n\t\t} else if (prefix === 0 || (prefix === 2 && !vendor(out, 1))) {\n\t\t\treturn out\n\t\t}\n\n\t\t// vendor prefix\n\t\tswitch (hash) {\n\t\t\t// text-decoration/text-size-adjust/text-shadow/text-align/text-transform: t, e, x\n\t\t\tcase 1015: {\n\t\t\t\t// text-shadow/text-align/text-transform, a\n\t\t\t\treturn out.charCodeAt(10) === 97 ? webkit + out + out : out\n\t\t\t}\n\t\t\t// filter/fill f, i, l\n\t\t\tcase 951: {\n\t\t\t\t// filter, t\n\t\t\t\treturn out.charCodeAt(3) === 116 ? webkit + out + out : out\n\t\t\t}\n\t\t\t// color/column, c, o, l\n\t\t\tcase 963: {\n\t\t\t\t// column, n\n\t\t\t\treturn out.charCodeAt(5) === 110 ? webkit + out + out : out\n\t\t\t}\n\t\t\t// box-decoration-break, b, o, x\n\t\t\tcase 1009: {\n\t\t\t\tif (out.charCodeAt(4) !== 100) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\t// mask, m, a, s\n\t\t\t// clip-path, c, l, i\n\t\t\tcase 969:\n\t\t\tcase 942: {\n\t\t\t\treturn webkit + out + out\n\t\t\t}\n\t\t\t// appearance: a, p, p\n\t\t\tcase 978: {\n\t\t\t\treturn webkit + out + moz + out + out\n\t\t\t}\n\t\t\t// hyphens: h, y, p\n\t\t\t// user-select: u, s, e\n\t\t\tcase 1019:\n\t\t\tcase 983: {\n\t\t\t\treturn webkit + out + moz + out + ms + out + out\n\t\t\t}\n\t\t\t// background/backface-visibility, b, a, c\n\t\t\tcase 883: {\n\t\t\t\t// backface-visibility, -\n\t\t\t\tif (out.charCodeAt(8) === DASH) {\n\t\t\t\t\treturn webkit + out + out\n\t\t\t\t}\n\n\t\t\t\t// image-set(...)\n\t\t\t\tif (out.indexOf('image-set(', 11) > 0) {\n\t\t\t\t\treturn out.replace(imgsrcptn, '$1'+webkit+'$2') + out\n\t\t\t\t}\n\n\t\t\t\treturn out\n\t\t\t}\n\t\t\t// flex: f, l, e\n\t\t\tcase 932: {\n\t\t\t\tif (out.charCodeAt(4) === DASH) {\n\t\t\t\t\tswitch (out.charCodeAt(5)) {\n\t\t\t\t\t\t// flex-grow, g\n\t\t\t\t\t\tcase 103: {\n\t\t\t\t\t\t\treturn webkit + 'box-' + out.replace('-grow', '') + webkit + out + ms + out.replace('grow', 'positive') + out\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// flex-shrink, s\n\t\t\t\t\t\tcase 115: {\n\t\t\t\t\t\t\treturn webkit + out + ms + out.replace('shrink', 'negative') + out\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// flex-basis, b\n\t\t\t\t\t\tcase 98: {\n\t\t\t\t\t\t\treturn webkit + out + ms + out.replace('basis', 'preferred-size') + out\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn webkit + out + ms + out + out\n\t\t\t}\n\t\t\t// order: o, r, d\n\t\t\tcase 964: {\n\t\t\t\treturn webkit + out + ms + 'flex' + '-' + out + out\n\t\t\t}\n\t\t\t// justify-items/justify-content, j, u, s\n\t\t\tcase 1023: {\n\t\t\t\t// justify-content, c\n\t\t\t\tif (out.charCodeAt(8) !== 99) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\n\t\t\t\tcache = out.substring(out.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify')\n\t\t\t\treturn webkit + 'box-pack' + cache + webkit + out + ms + 'flex-pack' + cache + out\n\t\t\t}\n\t\t\t// cursor, c, u, r\n\t\t\tcase 1005: {\n\t\t\t\treturn cursorptn.test(out) ? out.replace(colonptn, ':' + webkit) + out.replace(colonptn, ':' + moz) + out : out\n\t\t\t}\n\t\t\t// writing-mode, w, r, i\n\t\t\tcase 1000: {\n\t\t\t\tcache = out.substring(13).trim()\n\t\t\t\tindex = cache.indexOf('-') + 1\n\n\t\t\t\tswitch (cache.charCodeAt(0)+cache.charCodeAt(index)) {\n\t\t\t\t\t// vertical-lr\n\t\t\t\t\tcase 226: {\n\t\t\t\t\t\tcache = out.replace(writingptn, 'tb')\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\t// vertical-rl\n\t\t\t\t\tcase 232: {\n\t\t\t\t\t\tcache = out.replace(writingptn, 'tb-rl')\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\t// horizontal-tb\n\t\t\t\t\tcase 220: {\n\t\t\t\t\t\tcache = out.replace(writingptn, 'lr')\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\treturn out\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn webkit + out + ms + cache + out\n\t\t\t}\n\t\t\t// position: sticky\n\t\t\tcase 1017: {\n\t\t\t\tif (out.indexOf('sticky', 9) === -1) {\n\t\t\t\t\treturn out\n\t\t\t\t}\n\t\t\t}\n\t\t\t// display(flex/inline-flex/inline-box): d, i, s\n\t\t\tcase 975: {\n\t\t\t\tindex = (out = input).length - 10\n\t\t\t\tcache = (out.charCodeAt(index) === 33 ? out.substring(0, index) : out).substring(input.indexOf(':', 7) + 1).trim()\n\n\t\t\t\tswitch (hash = cache.charCodeAt(0) + (cache.charCodeAt(7)|0)) {\n\t\t\t\t\t// inline-\n\t\t\t\t\tcase 203: {\n\t\t\t\t\t\t// inline-box\n\t\t\t\t\t\tif (cache.charCodeAt(8) < 111) {\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// inline-box/sticky\n\t\t\t\t\tcase 115: {\n\t\t\t\t\t\tout = out.replace(cache, webkit+cache)+';'+out\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\t// inline-flex\n\t\t\t\t\t// flex\n\t\t\t\t\tcase 207:\n\t\t\t\t\tcase 102: {\n\t\t\t\t\t\tout = (\n\t\t\t\t\t\t\tout.replace(cache, webkit+(hash > 102 ? 'inline-' : '')+'box')+';'+\n\t\t\t\t\t\t\tout.replace(cache, webkit+cache)+';'+\n\t\t\t\t\t\t\tout.replace(cache, ms+cache+'box')+';'+\n\t\t\t\t\t\t\tout\n\t\t\t\t\t\t)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn out + ';'\n\t\t\t}\n\t\t\t// align-items, align-center, align-self: a, l, i, -\n\t\t\tcase 938: {\n\t\t\t\tif (out.charCodeAt(5) === DASH) {\n\t\t\t\t\tswitch (out.charCodeAt(6)) {\n\t\t\t\t\t\t// align-items, i\n\t\t\t\t\t\tcase 105: {\n\t\t\t\t\t\t\tcache = out.replace('-items', '')\n\t\t\t\t\t\t\treturn webkit + out + webkit + 'box-' + cache + ms + 'flex-' + cache + out\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// align-self, s\n\t\t\t\t\t\tcase 115: {\n\t\t\t\t\t\t\treturn webkit + out + ms + 'flex-item-' + out.replace(selfptn, '') + out\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// align-content\n\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\treturn webkit + out + ms + 'flex-line-pack' + out.replace('align-content', '').replace(selfptn, '') + out\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// min/max\n\t\t\tcase 973:\n\t\t\tcase 989: {\n\t\t\t\t// min-/max- height/width/block-size/inline-size\n\t\t\t\tif (out.charCodeAt(3) !== DASH || out.charCodeAt(4) === 122) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\t// height/width: min-content / width: max-content\n\t\t\tcase 931:\n\t\t\tcase 953: {\n\t\t\t\tif (dimensionptn.test(input) === true) {\n\t\t\t\t\t// stretch\n\t\t\t\t\tif ((cache = input.substring(input.indexOf(':') + 1)).charCodeAt(0) === 115)\n\t\t\t\t\t\treturn property(input.replace('stretch', 'fill-available'), first, second, third).replace(':fill-available', ':stretch')\n\t\t\t\t\telse\n\t\t\t\t\t\treturn out.replace(cache, webkit + cache) + out.replace(cache, moz + cache.replace('fill-', '')) + out\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// transform, transition: t, r, a\n\t\t\tcase 962: {\n\t\t\t\tout = webkit + out + (out.charCodeAt(5) === 102 ? ms + out : '') + out\n\n\t\t\t\t// transitions\n\t\t\t\tif (second + third === 211 && out.charCodeAt(13) === 105 && out.indexOf('transform', 10) > 0) {\n\t\t\t\t\treturn out.substring(0, out.indexOf(';', 27) + 1).replace(transformptn, '$1' + webkit + '$2') + out\n\t\t\t\t}\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\treturn out\n\t}\n\n\t/**\n\t * Vendor\n\t *\n\t * @param {string} content\n\t * @param {number} context\n\t * @return {boolean}\n\t */\n\tfunction vendor (content, context) {\n\t\tvar index = content.indexOf(context === 1 ? ':' : '{')\n\t\tvar key = content.substring(0, context !== 3 ? index : 10)\n\t\tvar value = content.substring(index + 1, content.length - 1)\n\n\t\treturn should(context !== 2 ? key : key.replace(pseudofmt, '$1'), value, context)\n\t}\n\n\t/**\n\t * Supports\n\t *\n\t * @param {string} match\n\t * @param {string} group\n\t * @return {string}\n\t */\n\tfunction supports (match, group) {\n\t\tvar out = property(group, group.charCodeAt(0), group.charCodeAt(1), group.charCodeAt(2))\n\n\t\treturn out !== group+';' ? out.replace(propertyptn, ' or ($1)').substring(4) : '('+group+')'\n\t}\n\n\t/**\n\t * Animation\n\t *\n\t * @param {string} input\n\t * @return {string}\n\t */\n\tfunction animation (input) {\n\t\tvar length = input.length\n\t\tvar index = input.indexOf(':', 9) + 1\n\t\tvar declare = input.substring(0, index).trim()\n\t\tvar out = input.substring(index, length-1).trim()\n\n\t\tswitch (input.charCodeAt(9)*keyed) {\n\t\t\tcase 0: {\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t// animation-*, -\n\t\t\tcase DASH: {\n\t\t\t\t// animation-name, n\n\t\t\t\tif (input.charCodeAt(10) !== 110) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\t// animation/animation-name\n\t\t\tdefault: {\n\t\t\t\t// split in case of multiple animations\n\t\t\t\tvar list = out.split((out = '', animationptn))\n\n\t\t\t\tfor (var i = 0, index = 0, length = list.length; i < length; index = 0, ++i) {\n\t\t\t\t\tvar value = list[i]\n\t\t\t\t\tvar items = value.split(propertiesptn)\n\n\t\t\t\t\twhile (value = items[index]) {\n\t\t\t\t\t\tvar peak = value.charCodeAt(0)\n\n\t\t\t\t\t\tif (keyed === 1 && (\n\t\t\t\t\t\t\t// letters\n\t\t\t\t\t\t\t(peak > AT && peak < 90) || (peak > 96 && peak < 123) || peak === UNDERSCORE ||\n\t\t\t\t\t\t\t// dash but not in sequence i.e --\n\t\t\t\t\t\t\t(peak === DASH && value.charCodeAt(1) !== DASH)\n\t\t\t\t\t\t)) {\n\t\t\t\t\t\t\t// not a number/function\n\t\t\t\t\t\t\tswitch (isNaN(parseFloat(value)) + (value.indexOf('(') !== -1)) {\n\t\t\t\t\t\t\t\tcase 1: {\n\t\t\t\t\t\t\t\t\tswitch (value) {\n\t\t\t\t\t\t\t\t\t\t// not a valid reserved keyword\n\t\t\t\t\t\t\t\t\t\tcase 'infinite': case 'alternate': case 'backwards': case 'running':\n\t\t\t\t\t\t\t\t\t\tcase 'normal': case 'forwards': case 'both': case 'none': case 'linear':\n\t\t\t\t\t\t\t\t\t\tcase 'ease': case 'ease-in': case 'ease-out': case 'ease-in-out':\n\t\t\t\t\t\t\t\t\t\tcase 'paused': case 'reverse': case 'alternate-reverse': case 'inherit':\n\t\t\t\t\t\t\t\t\t\tcase 'initial': case 'unset': case 'step-start': case 'step-end': {\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\t\t\t\tvalue += key\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\titems[index++] = value\n\t\t\t\t\t}\n\n\t\t\t\t\tout += (i === 0 ? '' : ',') + items.join(' ')\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tout = declare + out + ';'\n\n\t\tif (prefix === 1 || (prefix === 2 && vendor(out, 1)))\n\t\t\treturn webkit + out + out\n\n\t\treturn out\n\t}\n\n\t/**\n\t * Isolate\n\t *\n\t * @param {Array<string>} current\n\t */\n\tfunction isolate (current) {\n\t\tfor (var i = 0, length = current.length, selector = Array(length), padding, element; i < length; ++i) {\n\t\t\t// split individual elements in a selector i.e h1 h2 === [h1, h2]\n\t\t\tvar elements = current[i].split(elementptn)\n\t\t\tvar out = ''\n\n\t\t\tfor (var j = 0, size = 0, tail = 0, code = 0, l = elements.length; j < l; ++j) {\n\t\t\t\t// empty element\n\t\t\t\tif ((size = (element = elements[j]).length) === 0 && l > 1) {\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\ttail = out.charCodeAt(out.length-1)\n\t\t\t\tcode = element.charCodeAt(0)\n\t\t\t\tpadding = ''\n\n\t\t\t\tif (j !== 0) {\n\t\t\t\t\t// determine if we need padding\n\t\t\t\t\tswitch (tail) {\n\t\t\t\t\t\tcase STAR:\n\t\t\t\t\t\tcase TILDE:\n\t\t\t\t\t\tcase GREATERTHAN:\n\t\t\t\t\t\tcase PLUS:\n\t\t\t\t\t\tcase SPACE:\n\t\t\t\t\t\tcase OPENPARENTHESES:  {\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\tpadding = ' '\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (code) {\n\t\t\t\t\tcase AND: {\n\t\t\t\t\t\telement = padding + nscopealt\n\t\t\t\t\t}\n\t\t\t\t\tcase TILDE:\n\t\t\t\t\tcase GREATERTHAN:\n\t\t\t\t\tcase PLUS:\n\t\t\t\t\tcase SPACE:\n\t\t\t\t\tcase CLOSEPARENTHESES:\n\t\t\t\t\tcase OPENPARENTHESES: {\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcase OPENBRACKET: {\n\t\t\t\t\t\telement = padding + element + nscopealt\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcase COLON: {\n\t\t\t\t\t\tswitch (element.charCodeAt(1)*2 + element.charCodeAt(2)*3) {\n\t\t\t\t\t\t\t// :global\n\t\t\t\t\t\t\tcase 530: {\n\t\t\t\t\t\t\t\tif (escape > 0) {\n\t\t\t\t\t\t\t\t\telement = padding + element.substring(8, size - 1)\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// :hover, :nth-child(), ...\n\t\t\t\t\t\t\tdefault: {\n\t\t\t\t\t\t\t\tif (j < 1 || elements[j-1].length < 1) {\n\t\t\t\t\t\t\t\t\telement = padding + nscopealt + element\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t\tcase COMMA: {\n\t\t\t\t\t\tpadding = ''\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tif (size > 1 && element.indexOf(':') > 0) {\n\t\t\t\t\t\t\telement = padding + element.replace(pseudoptn, '$1' + nscopealt + '$2')\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\telement = padding + element + nscopealt\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tout += element\n\t\t\t}\n\n\t\t\tselector[i] = out.replace(formatptn, '').trim()\n\t\t}\n\n\t\treturn selector\n\t}\n\n\t/**\n\t * Proxy\n\t *\n\t * @param {number} context\n\t * @param {string} content\n\t * @param {Array<string>} selectors\n\t * @param {Array<string>} parents\n\t * @param {number} line\n\t * @param {number} column\n\t * @param {number} length\n\t * @param {number} id\n\t * @param {number} depth\n\t * @param {number} at\n\t * @return {(string|void|*)}\n\t */\n\tfunction proxy (context, content, selectors, parents, line, column, length, id, depth, at) {\n\t\tfor (var i = 0, out = content, next; i < plugged; ++i) {\n\t\t\tswitch (next = plugins[i].call(stylis, context, out, selectors, parents, line, column, length, id, depth, at)) {\n\t\t\t\tcase void 0:\n\t\t\t\tcase false:\n\t\t\t\tcase true:\n\t\t\t\tcase null: {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\tout = next\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (out !== content) {\n\t\t  return out\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} code\n\t * @param {number} index\n\t * @param {number} length\n\t * @param {string} body\n\t * @return {number}\n\t */\n\tfunction delimited (code, index, length, body) {\n\t\tfor (var i = index + 1; i < length; ++i) {\n\t\t\tswitch (body.charCodeAt(i)) {\n\t\t\t\t// /*\n\t\t\t\tcase FOWARDSLASH: {\n\t\t\t\t\tif (code === STAR) {\n\t\t\t\t\t\tif (body.charCodeAt(i - 1) === STAR &&  index + 2 !== i) {\n\t\t\t\t\t\t\treturn i + 1\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t// //\n\t\t\t\tcase NEWLINE: {\n\t\t\t\t\tif (code === FOWARDSLASH) {\n\t\t\t\t\t\treturn i + 1\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn i\n\t}\n\n\t/**\n\t * @param {number} type\n\t * @param {number} index\n\t * @param {number} length\n\t * @param {number} find\n\t * @param {string} body\n\t * @return {number}\n\t */\n\tfunction match (type, index, length, body) {\n\t\tfor (var i = index + 1; i < length; ++i) {\n\t\t\tswitch (body.charCodeAt(i)) {\n\t\t\t\tcase type: {\n\t\t\t\t\treturn i\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn i\n\t}\n\n\t/**\n\t * Minify\n\t *\n\t * @param {(string|*)} output\n\t * @return {string}\n\t */\n\tfunction minify (output) {\n\t\treturn output\n\t\t\t.replace(formatptn, '')\n\t\t\t.replace(beforeptn, '')\n\t\t\t.replace(afterptn, '$1')\n\t\t\t.replace(tailptn, '$1')\n\t\t\t.replace(whiteptn, ' ')\n\t}\n\n\t/**\n\t * Use\n\t *\n\t * @param {(Array<function(...?)>|function(...?)|number|void)?} plugin\n\t */\n\tfunction use (plugin) {\n\t\tswitch (plugin) {\n\t\t\tcase void 0:\n\t\t\tcase null: {\n\t\t\t\tplugged = plugins.length = 0\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tif (typeof plugin === 'function') {\n\t\t\t\t\tplugins[plugged++] = plugin\n\t\t\t\t}\telse if (typeof plugin === 'object') {\n\t\t\t\t\tfor (var i = 0, length = plugin.length; i < length; ++i) {\n\t\t\t\t\t\tuse(plugin[i])\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tunkwn = !!plugin|0\n\t\t\t\t}\n\t\t\t}\n \t\t}\n\n \t\treturn use\n\t}\n\n\t/**\n\t * Set\n\t *\n\t * @param {*} options\n\t */\n\tfunction set (options) {\n\t\tfor (var name in options) {\n\t\t\tvar value = options[name]\n\t\t\tswitch (name) {\n\t\t\t\tcase 'keyframe': keyed = value|0; break\n\t\t\t\tcase 'global': escape = value|0; break\n\t\t\t\tcase 'cascade': cascade = value|0; break\n\t\t\t\tcase 'compress': compress = value|0; break\n\t\t\t\tcase 'semicolon': semicolon = value|0; break\n\t\t\t\tcase 'preserve': preserve = value|0; break\n\t\t\t\tcase 'prefix':\n\t\t\t\t\tshould = null\n\n\t\t\t\t\tif (!value) {\n\t\t\t\t\t\tprefix = 0\n\t\t\t\t\t} else if (typeof value !== 'function') {\n\t\t\t\t\t\tprefix = 1\n\t\t\t\t\t} else {\n\t\t\t\t\t\tprefix = 2\n\t\t\t\t\t\tshould = value\n\t\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn set\n\t}\n\n\t/**\n\t * Stylis\n\t *\n\t * @param {string} selector\n\t * @param {string} input\n\t * @return {*}\n\t */\n\tfunction stylis (selector, input) {\n\t\tif (this !== void 0 && this.constructor === stylis) {\n\t\t\treturn factory(selector)\n\t\t}\n\n\t\t// setup\n\t\tvar ns = selector\n\t\tvar code = ns.charCodeAt(0)\n\n\t\t// trim leading whitespace\n\t\tif (code < 33) {\n\t\t\tcode = (ns = ns.trim()).charCodeAt(0)\n\t\t}\n\n\t\t// keyframe/animation namespace\n\t\tif (keyed > 0) {\n\t\t\tkey = ns.replace(invalidptn, code === OPENBRACKET ? '' : '-')\n\t\t}\n\n\t\t// reset, used to assert if a plugin is moneky-patching the return value\n\t\tcode = 1\n\n\t\t// cascade/isolate\n\t\tif (cascade === 1) {\n\t\t\tnscope = ns\n\t\t} else {\n\t\t\tnscopealt = ns\n\t\t}\n\n\t\tvar selectors = [nscope]\n\t\tvar result\n\n\t\t// execute plugins, pre-process context\n\t\tif (plugged > 0) {\n\t\t\tresult = proxy(PREPS, input, selectors, selectors, line, column, 0, 0, 0, 0)\n\n\t\t\tif (result !== void 0 && typeof result === 'string') {\n\t\t\t\tinput = result\n\t\t\t}\n\t\t}\n\n\t\t// build\n\t\tvar output = compile(array, selectors, input, 0, 0)\n\n\t\t// execute plugins, post-process context\n\t\tif (plugged > 0) {\n\t\t\tresult = proxy(POSTS, output, selectors, selectors, line, column, output.length, 0, 0, 0)\n\n\t\t\t// bypass minification\n\t\t\tif (result !== void 0 && typeof(output = result) !== 'string') {\n\t\t\t\tcode = 0\n\t\t\t}\n\t\t}\n\n\t\t// reset\n\t\tkey = ''\n\t\tnscope = ''\n\t\tnscopealt = ''\n\t\tpattern = 0\n\t\tline = 1\n\t\tcolumn = 1\n\n\t\treturn compress*code === 0 ? output : minify(output)\n\t}\n\n\tstylis['use'] = use\n\tstylis['set'] = set\n\n\tif (options !== void 0) {\n\t\tset(options)\n\t}\n\n\treturn stylis\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}